{"version":3,"file":"react-table.production.min.js","sources":["../src/publicUtils.js","../src/utils.js","../src/makeDefaultPluginHooks.js","../src/hooks/useColumnVisibility.js","../src/hooks/useTable.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/plugin-hooks/useGlobalFilter.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/_UNSTABLE_usePivotColumns.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/plugin-hooks/useBlockLayout.js","../src/plugin-hooks/useFlexLayout.js"],"sourcesContent":["import React from 'react'\n\nlet renderErr = 'Renderer Error ☝️'\n\nexport const actions = {\n  init: 'init',\n}\n\nexport const defaultRenderer = ({ value = '' }) => value;\nexport const emptyRenderer = () => <>&nbsp;</>;\n\nexport const defaultColumn = {\n  Cell: defaultRenderer,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\nfunction mergeProps(...propList) {\n  return propList.reduce((props, next) => {\n    const { style, className, ...rest } = next\n\n    props = {\n      ...props,\n      ...rest,\n    }\n\n    if (style) {\n      props.style = props.style\n        ? { ...(props.style || {}), ...(style || {}) }\n        : style\n    }\n\n    if (className) {\n      props.className = props.className\n        ? props.className + ' ' + className\n        : className\n    }\n\n    if (props.className === '') {\n      delete props.className\n    }\n\n    return props\n  }, {})\n}\n\nfunction handlePropGetter(prevProps, userProps, meta) {\n  // Handle a lambda, pass it the previous props\n  if (typeof userProps === 'function') {\n    return handlePropGetter({}, userProps(prevProps, meta))\n  }\n\n  // Handle an array, merge each item as separate props\n  if (Array.isArray(userProps)) {\n    return mergeProps(prevProps, ...userProps)\n  }\n\n  // Handle an object by default, merge the two objects\n  return mergeProps(prevProps, userProps)\n}\n\nexport const makePropGetter = (hooks, meta = {}) => {\n  return (userProps = {}) =>\n    [...hooks, userProps].reduce(\n      (prev, next) =>\n        handlePropGetter(prev, next, {\n          ...meta,\n          userProps,\n        }),\n      {}\n    )\n}\n\nexport const reduceHooks = (hooks, initial, meta = {}, allowUndefined) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (!allowUndefined && typeof nextValue === 'undefined') {\n        console.info(next)\n        throw new Error(\n          'React Table: A reducer hook ☝️ just returned undefined! This is not allowed.'\n        )\n      }\n    }\n    return nextValue\n  }, initial)\n\nexport const loopHooks = (hooks, context, meta = {}) =>\n  hooks.forEach(hook => {\n    const nextValue = hook(context, meta)\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof nextValue !== 'undefined') {\n        console.info(hook, nextValue)\n        throw new Error(\n          'React Table: A loop-type hook ☝️ just returned a value! This is not allowed.'\n        )\n      }\n    }\n  })\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  if (process.env.NODE_ENV !== 'production' && afters) {\n    throw new Error(\n      `Defining plugins in the \"after\" section of ensurePluginOrder is no longer supported (see plugin ${pluginName})`\n    )\n  }\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    if (process.env.NODE_ENV !== 'production') {\n      throw new Error(`The plugin \"${pluginName}\" was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n    }\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      if (process.env.NODE_ENV !== 'production') {\n        throw new Error(\n          `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n        )\n      }\n    }\n  })\n}\n\nexport function functionalUpdate(updater, old) {\n  return typeof updater === 'function' ? updater(old) : updater\n}\n\nexport function useGetLatest(obj) {\n  const ref = React.useRef()\n  ref.current = obj\n\n  return React.useCallback(() => ref.current, [])\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof document !== 'undefined' ? React.useLayoutEffect : React.useEffect\n\nexport function useMountedLayoutEffect(fn, deps) {\n  const mountedRef = React.useRef(false)\n\n  safeUseLayoutEffect(() => {\n    if (mountedRef.current) {\n      fn()\n    }\n    mountedRef.current = true\n    // eslint-disable-next-line\n  }, deps)\n}\n\nexport function useAsyncDebounce(defaultFn, defaultWait = 0) {\n  const debounceRef = React.useRef({})\n\n  const getDefaultFn = useGetLatest(defaultFn)\n  const getDefaultWait = useGetLatest(defaultWait)\n\n  return React.useCallback(\n    async (...args) => {\n      if (!debounceRef.current.promise) {\n        debounceRef.current.promise = new Promise((resolve, reject) => {\n          debounceRef.current.resolve = resolve\n          debounceRef.current.reject = reject\n        })\n      }\n\n      if (debounceRef.current.timeout) {\n        clearTimeout(debounceRef.current.timeout)\n      }\n\n      debounceRef.current.timeout = setTimeout(async () => {\n        delete debounceRef.current.timeout\n        try {\n          debounceRef.current.resolve(await getDefaultFn()(...args))\n        } catch (err) {\n          debounceRef.current.reject(err)\n        } finally {\n          delete debounceRef.current.promise\n        }\n      }, getDefaultWait())\n\n      return debounceRef.current.promise\n    },\n    [getDefaultFn, getDefaultWait]\n  )\n}\n\nexport function makeRenderer(instance, column, meta = {}) {\n  return (type, userProps = {}) => {\n    const Comp = typeof type === 'string' ? column[type] : type\n\n    if (typeof Comp === 'undefined') {\n      console.info(column)\n      throw new Error(renderErr)\n    }\n\n    return flexRender(Comp, { ...instance, column, ...meta, ...userProps })\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isReactComponent(component) {\n  return (\n    isClassComponent(component) ||\n    typeof component === 'function' ||\n    isExoticComponent(component)\n  )\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    (() => {\n      const proto = Object.getPrototypeOf(component)\n      return proto.prototype && proto.prototype.isReactComponent\n    })()\n  )\n}\n\nfunction isExoticComponent(component) {\n  return (\n    typeof component === 'object' &&\n    typeof component.$$typeof === 'symbol' &&\n    ['react.memo', 'react.forward_ref'].includes(component.$$typeof.description)\n  )\n}\n","import { defaultColumn, emptyRenderer } from './publicUtils'\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\n// Build the visible columns, headers and flat column list\nexport function linkColumnStructure(columns, parent, depth = 0) {\n  return columns.map(column => {\n    column = {\n      ...column,\n      parent,\n      depth,\n    }\n\n    assignColumnAccessor(column)\n\n    if (column.columns) {\n      column.columns = linkColumnStructure(column.columns, column, depth + 1)\n    }\n    return column\n  })\n}\n\nexport function flattenColumns(columns) {\n  return flattenBy(columns, 'columns')\n}\n\nexport function assignColumnAccessor(column) {\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  Object.assign(column, {\n    id,\n    accessor,\n  })\n\n  return column\n}\n\nexport function decorateColumn(column, userDefaultColumn) {\n  if (!userDefaultColumn) {\n    throw new Error()\n  }\n  Object.assign(column, {\n    // Make sure there is a fallback header, just in case\n    Header: emptyRenderer,\n    Footer: emptyRenderer,\n    ...defaultColumn,\n    ...userDefaultColumn,\n    ...column,\n  })\n\n  Object.assign(column, {\n    originalWidth: column.width,\n  })\n\n  return column\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(\n  allColumns,\n  defaultColumn,\n  additionalHeaderProperties = () => ({})\n) {\n  const headerGroups = []\n\n  let scanColumns = allColumns\n\n  let uid = 0\n  const getUID = () => uid++\n\n  while (scanColumns.length) {\n    // The header group we are creating\n    const headerGroup = {\n      headers: [],\n    }\n\n    // The parent columns we're going to scan next\n    const parentColumns = []\n\n    const hasParents = scanColumns.some(d => d.parent)\n\n    // Scan each column for parents\n    scanColumns.forEach(column => {\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      let newParent\n\n      if (hasParents) {\n        // If the column has a parent, add it if necessary\n        if (column.parent) {\n          newParent = {\n            ...column.parent,\n            originalId: column.parent.id,\n            id: `${column.parent.id}_${getUID()}`,\n            headers: [column],\n            ...additionalHeaderProperties(column),\n          }\n        } else {\n          // If other columns have parents, we'll need to add a place holder if necessary\n          const originalId = `${column.id}_placeholder`\n          newParent = decorateColumn(\n            {\n              originalId,\n              id: `${column.id}_placeholder_${getUID()}`,\n              placeholderOf: column,\n              headers: [column],\n              ...additionalHeaderProperties(column),\n            },\n            defaultColumn\n          )\n        }\n\n        // If the resulting parent columns are the same, just add\n        // the column and increment the header span\n        if (\n          latestParentColumn &&\n          latestParentColumn.originalId === newParent.originalId\n        ) {\n          latestParentColumn.headers.push(column)\n        } else {\n          parentColumns.push(newParent)\n        }\n      }\n\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    // Start scanning the parent columns\n    scanColumns = parentColumns\n  }\n\n  return headerGroups.reverse()\n}\n\nconst pathObjCache = new Map()\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path)\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path)\n      pathObjCache.set(cacheKey, pathObj)\n      return pathObj\n    })()\n\n  let val\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(arr, key) {\n  const flat = []\n\n  const recurse = arr => {\n    arr.forEach(d => {\n      if (!d[key]) {\n        flat.push(d)\n      } else {\n        recurse(d[key])\n      }\n    })\n  }\n\n  recurse(arr)\n\n  return flat\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) || expanded[row.id]\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\nexport function getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n\nexport function shouldAutoRemoveFilter(autoRemove, value, column) {\n  return autoRemove ? autoRemove(value, column) : typeof value === 'undefined'\n}\n\nexport function unpreparedAccessWarning() {\n  throw new Error(\n    'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n  )\n}\n\nlet passiveSupported = null\nexport function passiveEventSupported() {\n  // memoize support to avoid adding multiple test events\n  if (typeof passiveSupported === 'boolean') return passiveSupported\n\n  let supported = false\n  try {\n    const options = {\n      get passive() {\n        supported = true\n        return false\n      },\n    }\n\n    window.addEventListener('test', null, options)\n    window.removeEventListener('test', null, options)\n  } catch (err) {\n    supported = false\n  }\n  passiveSupported = supported\n  return passiveSupported\n}\n\n//\n\nconst reOpenBracket = /\\[/g\nconst reCloseBracket = /\\]/g\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","const defaultGetTableProps = props => ({\n  role: 'table',\n  ...props,\n})\n\nconst defaultGetTableBodyProps = props => ({\n  role: 'rowgroup',\n  ...props,\n})\n\nconst defaultGetHeaderProps = (props, { column }) => ({\n  key: `header_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  role: 'columnheader',\n  ...props,\n})\n\nconst defaultGetFooterProps = (props, { column }) => ({\n  key: `footer_${column.id}`,\n  colSpan: column.totalVisibleHeaderCount,\n  ...props,\n})\n\nconst defaultGetHeaderGroupProps = (props, { index }) => ({\n  key: `headerGroup_${index}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetFooterGroupProps = (props, { index }) => ({\n  key: `footerGroup_${index}`,\n  ...props,\n})\n\nconst defaultGetRowProps = (props, { row }) => ({\n  key: `row_${row.id}`,\n  role: 'row',\n  ...props,\n})\n\nconst defaultGetCellProps = (props, { cell }) => ({\n  key: `cell_${cell.row.id}_${cell.column.id}`,\n  role: 'cell',\n  ...props,\n})\n\nexport default function makeDefaultPluginHooks() {\n  return {\n    useOptions: [],\n    stateReducers: [],\n    useControlledState: [],\n    columns: [],\n    columnsDeps: [],\n    allColumns: [],\n    allColumnsDeps: [],\n    accessValue: [],\n    materializedColumns: [],\n    materializedColumnsDeps: [],\n    useInstanceAfterData: [],\n    visibleColumns: [],\n    visibleColumnsDeps: [],\n    headerGroups: [],\n    headerGroupsDeps: [],\n    useInstanceBeforeDimensions: [],\n    useInstance: [],\n    prepareRow: [],\n    getTableProps: [defaultGetTableProps],\n    getTableBodyProps: [defaultGetTableBodyProps],\n    getHeaderGroupProps: [defaultGetHeaderGroupProps],\n    getFooterGroupProps: [defaultGetFooterGroupProps],\n    getHeaderProps: [defaultGetHeaderProps],\n    getFooterProps: [defaultGetFooterProps],\n    getRowProps: [defaultGetRowProps],\n    getCellProps: [defaultGetCellProps],\n    useFinalInstance: [],\n  }\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useGetLatest,\n  makePropGetter,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nactions.resetHiddenColumns = 'resetHiddenColumns'\nactions.toggleHideColumn = 'toggleHideColumn'\nactions.setHiddenColumns = 'setHiddenColumns'\nactions.toggleHideAllColumns = 'toggleHideAllColumns'\n\nexport const useColumnVisibility = hooks => {\n  hooks.getToggleHiddenProps = [defaultGetToggleHiddenProps]\n  hooks.getToggleHideAllColumnsProps = [defaultGetToggleHideAllColumnsProps]\n\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n  hooks.headerGroupsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.hiddenColumns,\n  ])\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnVisibility.pluginName = 'useColumnVisibility'\n\nconst defaultGetToggleHiddenProps = (props, { column }) => [\n  props,\n  {\n    onChange: e => {\n      column.toggleHidden(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: column.isVisible,\n    title: 'Toggle Column Visible',\n  },\n]\n\nconst defaultGetToggleHideAllColumnsProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleHideAllColumns(!e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: !instance.allColumnsHidden && !instance.state.hiddenColumns.length,\n    title: 'Toggle All Columns Hidden',\n    indeterminate:\n      !instance.allColumnsHidden && instance.state.hiddenColumns.length,\n  },\n]\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      hiddenColumns: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: instance.initialState.hiddenColumns || [],\n    }\n  }\n\n  if (action.type === actions.toggleHideColumn) {\n    const should =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.includes(action.columnId)\n\n    const hiddenColumns = should\n      ? [...state.hiddenColumns, action.columnId]\n      : state.hiddenColumns.filter(d => d !== action.columnId)\n\n    return {\n      ...state,\n      hiddenColumns,\n    }\n  }\n\n  if (action.type === actions.setHiddenColumns) {\n    return {\n      ...state,\n      hiddenColumns: functionalUpdate(action.value, state.hiddenColumns),\n    }\n  }\n\n  if (action.type === actions.toggleHideAllColumns) {\n    const shouldAll =\n      typeof action.value !== 'undefined'\n        ? action.value\n        : !state.hiddenColumns.length\n\n    return {\n      ...state,\n      hiddenColumns: shouldAll ? instance.allColumns.map(d => d.id) : [],\n    }\n  }\n}\n\nfunction useInstanceBeforeDimensions(instance) {\n  const {\n    headers,\n    state: { hiddenColumns },\n  } = instance\n\n  const isMountedRef = React.useRef(false)\n\n  if (!isMountedRef.current) {\n  }\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible && !hiddenColumns.includes(column.id)\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    flatHeaders,\n    dispatch,\n    allColumns,\n    getHooks,\n    state: { hiddenColumns },\n    autoResetHiddenColumns = true,\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  const allColumnsHidden = allColumns.length === hiddenColumns.length\n\n  const toggleHideColumn = React.useCallback(\n    (columnId, value) =>\n      dispatch({ type: actions.toggleHideColumn, columnId, value }),\n    [dispatch]\n  )\n\n  const setHiddenColumns = React.useCallback(\n    value => dispatch({ type: actions.setHiddenColumns, value }),\n    [dispatch]\n  )\n\n  const toggleHideAllColumns = React.useCallback(\n    value => dispatch({ type: actions.toggleHideAllColumns, value }),\n    [dispatch]\n  )\n\n  const getToggleHideAllColumnsProps = makePropGetter(\n    getHooks().getToggleHideAllColumnsProps,\n    { instance: getInstance() }\n  )\n\n  flatHeaders.forEach(column => {\n    column.toggleHidden = value => {\n      dispatch({\n        type: actions.toggleHideColumn,\n        columnId: column.id,\n        value,\n      })\n    }\n\n    column.getToggleHiddenProps = makePropGetter(\n      getHooks().getToggleHiddenProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n  })\n\n  const getAutoResetHiddenColumns = useGetLatest(autoResetHiddenColumns)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetHiddenColumns()) {\n      dispatch({ type: actions.resetHiddenColumns })\n    }\n  }, [dispatch, columns])\n\n  Object.assign(instance, {\n    allColumnsHidden,\n    toggleHideColumn,\n    setHiddenColumns,\n    toggleHideAllColumns,\n    getToggleHideAllColumnsProps,\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  linkColumnStructure,\n  flattenColumns,\n  assignColumnAccessor,\n  unpreparedAccessWarning,\n  makeHeaderGroups,\n  decorateColumn,\n} from '../utils'\n\nimport {\n  useGetLatest,\n  reduceHooks,\n  actions,\n  loopHooks,\n  makePropGetter,\n  makeRenderer,\n} from '../publicUtils'\n\nimport makeDefaultPluginHooks from '../makeDefaultPluginHooks'\n\nimport { useColumnVisibility } from './useColumnVisibility'\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (state, action, prevState) => state\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowId = (row, index, parent) =>\n  `${parent ? [parent.id, index].join('.') : index}`\nconst defaultUseControlledState = d => d\n\nfunction applyDefaults(props) {\n  const {\n    initialState = defaultInitialState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowId = defaultGetRowId,\n    stateReducer = defaultReducer,\n    useControlledState = defaultUseControlledState,\n    ...rest\n  } = props\n\n  return {\n    ...rest,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  }\n}\n\nexport const useTable = (props, ...plugins) => {\n  // Apply default props\n  props = applyDefaults(props)\n\n  // Add core plugins\n  plugins = [useColumnVisibility, ...plugins]\n\n  // Create the table instance\n  let instanceRef = React.useRef({})\n\n  // Create a getter for the instance (helps avoid a lot of potential memory leaks)\n  const getInstance = useGetLatest(instanceRef.current)\n\n  // Assign the props, plugins and hooks to the instance\n  Object.assign(getInstance(), {\n    ...props,\n    plugins,\n    hooks: makeDefaultPluginHooks(),\n  })\n\n  // Allow plugins to register hooks as early as possible\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(getInstance().hooks)\n  })\n\n  // Consume all hooks and make a getter for them\n  const getHooks = useGetLatest(getInstance().hooks)\n  getInstance().getHooks = getHooks\n  delete getInstance().hooks\n\n  // Allow useOptions hooks to modify the options coming into the table\n  Object.assign(\n    getInstance(),\n    reduceHooks(getHooks().useOptions, applyDefaults(props))\n  )\n\n  const {\n    data,\n    columns: userColumns,\n    initialState,\n    defaultColumn,\n    getSubRows,\n    getRowId,\n    stateReducer,\n    useControlledState,\n  } = getInstance()\n\n  // Setup user reducer ref\n  const getStateReducer = useGetLatest(stateReducer)\n\n  // Build the reducer\n  const reducer = React.useCallback(\n    (state, action) => {\n      // Detect invalid actions\n      if (!action.type) {\n        console.info({ action })\n        throw new Error('Unknown Action 👆')\n      }\n\n      // Reduce the state from all plugin reducers\n      return [\n        ...getHooks().stateReducers,\n        // Allow the user to add their own state reducer(s)\n        ...(Array.isArray(getStateReducer())\n          ? getStateReducer()\n          : [getStateReducer()]),\n      ].reduce(\n        (s, handler) => handler(s, action, state, getInstance()) || s,\n        state\n      )\n    },\n    [getHooks, getStateReducer, getInstance]\n  )\n\n  // Start the reducer\n  const [reducerState, dispatch] = React.useReducer(reducer, undefined, () =>\n    reducer(initialState, { type: actions.init })\n  )\n\n  // Allow the user to control the final state with hooks\n  const state = reduceHooks(\n    [...getHooks().useControlledState, useControlledState],\n    reducerState,\n    { instance: getInstance() }\n  )\n\n  Object.assign(getInstance(), {\n    state,\n    dispatch,\n  })\n\n  // Decorate All the columns\n  const columns = React.useMemo(\n    () =>\n      linkColumnStructure(\n        reduceHooks(getHooks().columns, userColumns, {\n          instance: getInstance(),\n        })\n      ),\n    [\n      getHooks,\n      getInstance,\n      userColumns,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().columnsDeps, [], { instance: getInstance() }),\n    ]\n  )\n  getInstance().columns = columns\n\n  // Get the flat list of all columns and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let allColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().allColumns, flattenColumns(columns), {\n        instance: getInstance(),\n      }).map(assignColumnAccessor),\n    [\n      columns,\n      getHooks,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().allColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().allColumns = allColumns\n\n  // Access the row model using initial columns\n  const [rows, flatRows, rowsById] = React.useMemo(() => {\n    let rows = []\n    let flatRows = []\n    const rowsById = {}\n\n    const allColumnsQueue = [...allColumns]\n\n    while (allColumnsQueue.length) {\n      const column = allColumnsQueue.shift()\n      accessRowsForColumn({\n        data,\n        rows,\n        flatRows,\n        rowsById,\n        column,\n        getRowId,\n        getSubRows,\n        accessValueHooks: getHooks().accessValue,\n        getInstance,\n      })\n    }\n\n    return [rows, flatRows, rowsById]\n  }, [allColumns, data, getRowId, getSubRows, getHooks, getInstance])\n\n  Object.assign(getInstance(), {\n    rows,\n    initialRows: [...rows],\n    flatRows,\n    rowsById,\n    // materializedColumns,\n  })\n\n  loopHooks(getHooks().useInstanceAfterData, getInstance())\n\n  // Get the flat list of all columns AFTER the rows\n  // have been access, and allow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let visibleColumns = React.useMemo(\n    () =>\n      reduceHooks(getHooks().visibleColumns, allColumns, {\n        instance: getInstance(),\n      }).map(d => decorateColumn(d, defaultColumn)),\n    [\n      getHooks,\n      allColumns,\n      getInstance,\n      defaultColumn,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().visibleColumnsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n\n  // Combine new visible columns with all columns\n  allColumns = React.useMemo(() => {\n    const columns = [...visibleColumns]\n\n    allColumns.forEach(column => {\n      if (!columns.find(d => d.id === column.id)) {\n        columns.push(column)\n      }\n    })\n\n    return columns\n  }, [allColumns, visibleColumns])\n  getInstance().allColumns = allColumns\n\n  if (process.env.NODE_ENV !== 'production') {\n    const duplicateColumns = allColumns.filter((column, i) => {\n      return allColumns.findIndex(d => d.id === column.id) !== i\n    })\n\n    if (duplicateColumns.length) {\n      console.info(allColumns)\n      throw new Error(\n        `Duplicate columns were found with ids: \"${duplicateColumns\n          .map(d => d.id)\n          .join(', ')}\" in the columns array above`\n      )\n    }\n  }\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () =>\n      reduceHooks(\n        getHooks().headerGroups,\n        makeHeaderGroups(visibleColumns, defaultColumn),\n        getInstance()\n      ),\n    [\n      getHooks,\n      visibleColumns,\n      defaultColumn,\n      getInstance,\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      ...reduceHooks(getHooks().headerGroupsDeps, [], {\n        instance: getInstance(),\n      }),\n    ]\n  )\n  getInstance().headerGroups = headerGroups\n\n  // Get the first level of headers\n  const headers = React.useMemo(\n    () => (headerGroups.length ? headerGroups[0].headers : []),\n    [headerGroups]\n  )\n  getInstance().headers = headers\n\n  // Provide a flat header list for utilities\n  getInstance().flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  loopHooks(getHooks().useInstanceBeforeDimensions, getInstance())\n\n  // Filter columns down to visible ones\n  const visibleColumnsDep = visibleColumns\n    .filter(d => d.isVisible)\n    .map(d => d.id)\n    .sort()\n    .join('_')\n\n  visibleColumns = React.useMemo(\n    () => visibleColumns.filter(d => d.isVisible),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [visibleColumns, visibleColumnsDep]\n  )\n  getInstance().visibleColumns = visibleColumns\n\n  // Header Visibility is needed by this point\n  const [\n    totalColumnsMinWidth,\n    totalColumnsWidth,\n    totalColumnsMaxWidth,\n  ] = calculateHeaderWidths(headers)\n\n  getInstance().totalColumnsMinWidth = totalColumnsMinWidth\n  getInstance().totalColumnsWidth = totalColumnsWidth\n  getInstance().totalColumnsMaxWidth = totalColumnsMaxWidth\n\n  loopHooks(getHooks().useInstance, getInstance())\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  ;[...getInstance().flatHeaders, ...getInstance().allColumns].forEach(\n    column => {\n      // Give columns/headers rendering power\n      column.render = makeRenderer(getInstance(), column)\n\n      // Give columns/headers a default getHeaderProps\n      column.getHeaderProps = makePropGetter(getHooks().getHeaderProps, {\n        instance: getInstance(),\n        column,\n      })\n\n      // Give columns/headers a default getFooterProps\n      column.getFooterProps = makePropGetter(getHooks().getFooterProps, {\n        instance: getInstance(),\n        column,\n      })\n    }\n  )\n\n  getInstance().headerGroups = React.useMemo(\n    () =>\n      headerGroups.filter((headerGroup, i) => {\n        // Filter out any headers and headerGroups that don't have visible columns\n        headerGroup.headers = headerGroup.headers.filter(column => {\n          const recurse = headers =>\n            headers.filter(column => {\n              if (column.headers) {\n                return recurse(column.headers)\n              }\n              return column.isVisible\n            }).length\n          if (column.headers) {\n            return recurse(column.headers)\n          }\n          return column.isVisible\n        })\n\n        // Give headerGroups getRowProps\n        if (headerGroup.headers.length) {\n          headerGroup.getHeaderGroupProps = makePropGetter(\n            getHooks().getHeaderGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          headerGroup.getFooterGroupProps = makePropGetter(\n            getHooks().getFooterGroupProps,\n            { instance: getInstance(), headerGroup, index: i }\n          )\n\n          return true\n        }\n\n        return false\n      }),\n    [headerGroups, getInstance, getHooks]\n  )\n\n  getInstance().footerGroups = [...getInstance().headerGroups].reverse()\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  getInstance().prepareRow = React.useCallback(\n    row => {\n      row.getRowProps = makePropGetter(getHooks().getRowProps, {\n        instance: getInstance(),\n        row,\n      })\n\n      // Build the visible cells for each row\n      row.allCells = allColumns.map(column => {\n        const value = row.values[column.id]\n\n        const cell = {\n          column,\n          row,\n          value,\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = makePropGetter(getHooks().getCellProps, {\n          instance: getInstance(),\n          cell,\n        })\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = makeRenderer(getInstance(), column, {\n          row,\n          cell,\n          value,\n        })\n\n        return cell\n      })\n\n      row.cells = visibleColumns.map(column =>\n        row.allCells.find(cell => cell.column.id === column.id)\n      )\n\n      // need to apply any row specific hooks (useExpanded requires this)\n      loopHooks(getHooks().prepareRow, row, { instance: getInstance() })\n    },\n    [getHooks, getInstance, allColumns, visibleColumns]\n  )\n\n  getInstance().getTableProps = makePropGetter(getHooks().getTableProps, {\n    instance: getInstance(),\n  })\n\n  getInstance().getTableBodyProps = makePropGetter(\n    getHooks().getTableBodyProps,\n    {\n      instance: getInstance(),\n    }\n  )\n\n  loopHooks(getHooks().useFinalInstance, getInstance())\n\n  return getInstance()\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalMinWidth = 0\n  let sumTotalWidth = 0\n  let sumTotalMaxWidth = 0\n  let sumTotalFlexWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      const [\n        totalMinWidth,\n        totalWidth,\n        totalMaxWidth,\n        totalFlexWidth,\n      ] = calculateHeaderWidths(subHeaders, left)\n      header.totalMinWidth = totalMinWidth\n      header.totalWidth = totalWidth\n      header.totalMaxWidth = totalMaxWidth\n      header.totalFlexWidth = totalFlexWidth\n    } else {\n      header.totalMinWidth = header.minWidth\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n      header.totalMaxWidth = header.maxWidth\n      header.totalFlexWidth = header.canResize ? header.totalWidth : 0\n    }\n    if (header.isVisible) {\n      left += header.totalWidth\n      sumTotalMinWidth += header.totalMinWidth\n      sumTotalWidth += header.totalWidth\n      sumTotalMaxWidth += header.totalMaxWidth\n      sumTotalFlexWidth += header.totalFlexWidth\n    }\n  })\n\n  return [sumTotalMinWidth, sumTotalWidth, sumTotalMaxWidth, sumTotalFlexWidth]\n}\n\nfunction accessRowsForColumn({\n  data,\n  rows,\n  flatRows,\n  rowsById,\n  column,\n  getRowId,\n  getSubRows,\n  accessValueHooks,\n  getInstance,\n}) {\n  // Access the row's data column-by-column\n  // We do it this way so we can incrementally add materialized\n  // columns after the first pass and avoid excessive looping\n  const accessRow = (originalRow, rowIndex, depth = 0, parent, parentRows) => {\n    // Keep the original reference around\n    const original = originalRow\n\n    const id = getRowId(originalRow, rowIndex, parent)\n\n    let row = rowsById[id]\n\n    // If the row hasn't been created, let's make it\n    if (!row) {\n      row = {\n        id,\n        original,\n        index: rowIndex,\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n\n      // Push this row into the parentRows array\n      parentRows.push(row)\n      // Keep track of every row in a flat array\n      flatRows.push(row)\n      // Also keep track of every row by its ID\n      rowsById[id] = row\n\n      // Get the original subrows\n      row.originalSubRows = getSubRows(originalRow, rowIndex)\n\n      // Then recursively access them\n      if (row.originalSubRows) {\n        const subRows = []\n        row.originalSubRows.forEach((d, i) =>\n          accessRow(d, i, depth + 1, row, subRows)\n        )\n        // Keep the new subRows array on the row\n        row.subRows = subRows\n      }\n    } else if (row.subRows) {\n      // If the row exists, then it's already been accessed\n      // Keep recursing, but don't worry about passing the\n      // accumlator array (those rows already exist)\n      row.originalSubRows.forEach((d, i) => accessRow(d, i, depth + 1, row))\n    }\n\n    // If the column has an accessor, use it to get a value\n    if (column.accessor) {\n      row.values[column.id] = column.accessor(originalRow, rowIndex, row)\n    }\n\n    // Allow plugins to manipulate the column value\n    row.values[column.id] = reduceHooks(\n      accessValueHooks,\n      row.values[column.id],\n      {\n        row,\n        column,\n        instance: getInstance(),\n      },\n      true\n    )\n  }\n\n  data.forEach((originalRow, rowIndex) =>\n    accessRow(originalRow, rowIndex, 0, undefined, rows)\n  )\n}\n","import React from 'react'\n\nimport { expandRows } from '../utils'\n\nimport {\n  useGetLatest,\n  actions,\n  useMountedLayoutEffect,\n  makePropGetter,\n  ensurePluginOrder,\n} from '../publicUtils'\n\n// Actions\nactions.resetExpanded = 'resetExpanded'\nactions.toggleRowExpanded = 'toggleRowExpanded'\nactions.toggleAllRowsExpanded = 'toggleAllRowsExpanded'\n\nexport const useExpanded = hooks => {\n  hooks.getToggleAllRowsExpandedProps = [defaultGetToggleAllRowsExpandedProps]\n  hooks.getToggleRowExpandedProps = [defaultGetToggleRowExpandedProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nconst defaultGetToggleAllRowsExpandedProps = (props, { instance }) => [\n  props,\n  {\n    onClick: e => {\n      instance.toggleAllRowsExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle All Rows Expanded',\n  },\n]\n\nconst defaultGetToggleRowExpandedProps = (props, { row }) => [\n  props,\n  {\n    onClick: () => {\n      row.toggleRowExpanded()\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    title: 'Toggle Row Expanded',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      expanded: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetExpanded) {\n    return {\n      ...state,\n      expanded: instance.initialState.expanded || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsExpanded) {\n    const { value } = action\n    const { isAllRowsExpanded, rowsById } = instance\n\n    const expandAll = typeof value !== 'undefined' ? value : !isAllRowsExpanded\n\n    if (expandAll) {\n      const expanded = {}\n\n      Object.keys(rowsById).forEach(rowId => {\n        expanded[rowId] = true\n      })\n\n      return {\n        ...state,\n        expanded,\n      }\n    }\n\n    return {\n      ...state,\n      expanded: {},\n    }\n  }\n\n  if (action.type === actions.toggleRowExpanded) {\n    const { id, value: setExpanded } = action\n    const exists = state.expanded[id]\n\n    const shouldExist =\n      typeof setExpanded !== 'undefined' ? setExpanded : !exists\n\n    if (!exists && shouldExist) {\n      return {\n        ...state,\n        expanded: {\n          ...state.expanded,\n          [id]: true,\n        },\n      }\n    } else if (exists && !shouldExist) {\n      const { [id]: _, ...rest } = state.expanded\n      return {\n        ...state,\n        expanded: rest,\n      }\n    } else {\n      return state\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    rowsById,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    autoResetExpanded = true,\n    getHooks,\n    plugins,\n    state: { expanded },\n    dispatch,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useSortBy', 'useGroupBy', 'usePivotColumns', 'useGlobalFilter'],\n    'useExpanded'\n  )\n\n  const getAutoResetExpanded = useGetLatest(autoResetExpanded)\n\n  let isAllRowsExpanded = Boolean(\n    Object.keys(rowsById).length && Object.keys(expanded).length\n  )\n\n  if (isAllRowsExpanded) {\n    if (Object.keys(rowsById).some(id => !expanded[id])) {\n      isAllRowsExpanded = false\n    }\n  }\n\n  // Bypass any effects from firing when this changes\n  useMountedLayoutEffect(() => {\n    if (getAutoResetExpanded()) {\n      dispatch({ type: actions.resetExpanded })\n    }\n  }, [dispatch, data])\n\n  const toggleRowExpanded = React.useCallback(\n    (id, value) => {\n      dispatch({ type: actions.toggleRowExpanded, id, value })\n    },\n    [dispatch]\n  )\n\n  const toggleAllRowsExpanded = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsExpanded, value }),\n    [dispatch]\n  )\n\n  const expandedRows = React.useMemo(() => {\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [paginateExpandedRows, rows, manualExpandedKey, expanded, expandSubRows])\n\n  const expandedDepth = React.useMemo(() => findExpandedDepth(expanded), [\n    expanded,\n  ])\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsExpandedProps = makePropGetter(\n    getHooks().getToggleAllRowsExpandedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    preExpandedRows: rows,\n    expandedRows,\n    rows: expandedRows,\n    expandedDepth,\n    isAllRowsExpanded,\n    toggleRowExpanded,\n    toggleAllRowsExpanded,\n    getToggleAllRowsExpandedProps,\n  })\n}\n\nfunction prepareRow(row, { instance: { getHooks }, instance }) {\n  row.toggleRowExpanded = set => instance.toggleRowExpanded(row.id, set)\n\n  row.getToggleRowExpandedProps = makePropGetter(\n    getHooks().getToggleRowExpandedProps,\n    {\n      instance,\n      row,\n    }\n  )\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  Object.keys(expanded).forEach(id => {\n    const splitId = id.split('.')\n    maxDepth = Math.max(maxDepth, splitId.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, ids, filterValue) => {\n  rows = rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return String(rowValue)\n        .toLowerCase()\n        .includes(String(filterValue).toLowerCase())\n    })\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n        : true\n    })\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue !== undefined\n        ? String(rowValue) === String(filterValue)\n        : true\n    })\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue.includes(filterValue)\n    })\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.every(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const includesSome = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return (\n        rowValue &&\n        rowValue.length &&\n        filterValue.some(val => rowValue.includes(val))\n      )\n    })\n  })\n}\n\nincludesSome.autoRemove = val => !val || !val.length\n\nexport const includesValue = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return filterValue.includes(rowValue)\n    })\n  })\n}\n\nincludesValue.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue === filterValue\n    })\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, ids, filterValue) => {\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      // eslint-disable-next-line eqeqeq\n      return rowValue == filterValue\n    })\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, ids, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    return ids.some(id => {\n      const rowValue = row.values[id]\n      return rowValue >= min && rowValue <= max\n    })\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\n\nimport {\n  getFirstDefined,\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n} from '../utils'\n\nimport {\n  actions,\n  useGetLatest,\n  functionalUpdate,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetFilters = 'resetFilters'\nactions.setFilter = 'setFilter'\nactions.setAllFilters = 'setAllFilters'\n\nexport const useFilters = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      filters: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetFilters) {\n    return {\n      ...state,\n      filters: instance.initialState.filters || [],\n    }\n  }\n\n  if (action.type === actions.setFilter) {\n    const { columnId, filterValue } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    const column = allColumns.find(d => d.id === columnId)\n\n    if (!column) {\n      throw new Error(\n        `React-Table: Could not find a column with id: ${columnId}`\n      )\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const previousfilter = state.filters.find(d => d.id === columnId)\n\n    const newFilter = functionalUpdate(\n      filterValue,\n      previousfilter && previousfilter.value\n    )\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter, column)) {\n      return {\n        ...state,\n        filters: state.filters.filter(d => d.id !== columnId),\n      }\n    }\n\n    if (previousfilter) {\n      return {\n        ...state,\n        filters: state.filters.map(d => {\n          if (d.id === columnId) {\n            return { id: columnId, value: newFilter }\n          }\n          return d\n        }),\n      }\n    }\n\n    return {\n      ...state,\n      filters: [...state.filters, { id: columnId, value: newFilter }],\n    }\n  }\n\n  if (action.type === actions.setAllFilters) {\n    const { filters } = action\n    const { allColumns, filterTypes: userFilterTypes } = instance\n\n    return {\n      ...state,\n      // Filter out undefined values\n      filters: functionalUpdate(filters, state.filters).filter(filter => {\n        const column = allColumns.find(d => d.id === filter.id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (\n          shouldAutoRemoveFilter(filterMethod.autoRemove, filter.value, column)\n        ) {\n          return false\n        }\n        return true\n      }),\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    defaultCanFilter = false,\n    disableFilters,\n    state: { filters },\n    dispatch,\n    autoResetFilters = true,\n  } = instance\n\n  const setFilter = React.useCallback(\n    (columnId, filterValue) => {\n      dispatch({ type: actions.setFilter, columnId, filterValue })\n    },\n    [dispatch]\n  )\n\n  const setAllFilters = React.useCallback(\n    filters => {\n      dispatch({\n        type: actions.setAllFilters,\n        filters,\n      })\n    },\n    [dispatch]\n  )\n\n  allColumns.forEach(column => {\n    const {\n      id,\n      accessor,\n      defaultCanFilter: columnDefaultCanFilter,\n      disableFilters: columnDisableFilters,\n    } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(columnDefaultCanFilter, defaultCanFilter, false)\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    const found = filters.find(d => d.id === id)\n    column.filterValue = found && found.value\n  })\n\n  const [\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualFilters || !filters.length) {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = filters.reduce(\n        (filteredSoFar, { id: columnId, value: filterValue }) => {\n          // Find the filters column\n          const column = allColumns.find(d => d.id === columnId)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            [columnId],\n            filterValue\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n        if (!row.subRows) {\n          return\n        }\n\n        row.subRows =\n          row.subRows && row.subRows.length > 0\n            ? filterRows(row.subRows, depth + 1)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualFilters,\n    filters,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = allColumns.filter(\n      column => !filters.find(d => d.id === column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, allColumns])\n\n  const getAutoResetFilters = useGetLatest(autoResetFilters)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetFilters()) {\n      dispatch({ type: actions.resetFilters })\n    }\n  }, [dispatch, manualFilters ? null : data])\n\n  Object.assign(instance, {\n    preFilteredRows: rows,\n    preFilteredFlatRows: flatRows,\n    preFilteredRowsById: rowsById,\n    filteredRows,\n    filteredFlatRows,\n    filteredRowsById,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n    rowsById: filteredRowsById,\n    setFilter,\n    setAllFilters,\n  })\n}\n","import React from 'react'\n\nimport {\n  getFilterMethod,\n  shouldAutoRemoveFilter,\n  getFirstDefined,\n} from '../utils'\n\nimport {\n  actions,\n  useMountedLayoutEffect,\n  functionalUpdate,\n  useGetLatest,\n} from '../publicUtils'\n\nimport * as filterTypes from '../filterTypes'\n\n// Actions\nactions.resetGlobalFilter = 'resetGlobalFilter'\nactions.setGlobalFilter = 'setGlobalFilter'\n\nexport const useGlobalFilter = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseGlobalFilter.pluginName = 'useGlobalFilter'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.resetGlobalFilter) {\n    return {\n      ...state,\n      globalFilter: instance.initialState.globalFilter || undefined,\n    }\n  }\n\n  if (action.type === actions.setGlobalFilter) {\n    const { filterValue } = action\n    const { userFilterTypes } = instance\n\n    const filterMethod = getFilterMethod(\n      instance.globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    const newFilter = functionalUpdate(filterValue, state.globalFilter)\n\n    //\n    if (shouldAutoRemoveFilter(filterMethod.autoRemove, newFilter)) {\n      const { globalFilter, ...stateWithoutGlobalFilter } = state\n      return stateWithoutGlobalFilter\n    }\n\n    return {\n      ...state,\n      globalFilter: newFilter,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    filterTypes: userFilterTypes,\n    globalFilter,\n    manualGlobalFilter,\n    state: { globalFilter: globalFilterValue },\n    dispatch,\n    autoResetGlobalFilter = true,\n    disableGlobalFilter,\n  } = instance\n\n  const setGlobalFilter = React.useCallback(\n    filterValue => {\n      dispatch({ type: actions.setGlobalFilter, filterValue })\n    },\n    [dispatch]\n  )\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const [\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n  ] = React.useMemo(() => {\n    if (manualGlobalFilter || typeof globalFilterValue === 'undefined') {\n      return [rows, flatRows, rowsById]\n    }\n\n    const filteredFlatRows = []\n    const filteredRowsById = {}\n\n    const filterMethod = getFilterMethod(\n      globalFilter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    if (!filterMethod) {\n      console.warn(`Could not find a valid 'globalFilter' option.`)\n      return rows\n    }\n\n    allColumns.forEach(column => {\n      const { disableGlobalFilter: columnDisableGlobalFilter } = column\n\n      column.canFilter = getFirstDefined(\n        columnDisableGlobalFilter === true ? false : undefined,\n        disableGlobalFilter === true ? false : undefined,\n        true\n      )\n    })\n\n    const filterableColumns = allColumns.filter(c => c.canFilter === true)\n\n    // Filters top level and nested rows\n    const filterRows = filteredRows => {\n      filteredRows = filterMethod(\n        filteredRows,\n        filterableColumns.map(d => d.id),\n        globalFilterValue\n      )\n\n      filteredRows.forEach(row => {\n        filteredFlatRows.push(row)\n        filteredRowsById[row.id] = row\n\n        row.subRows =\n          row.subRows && row.subRows.length\n            ? filterRows(row.subRows)\n            : row.subRows\n      })\n\n      return filteredRows\n    }\n\n    return [filterRows(rows), filteredFlatRows, filteredRowsById]\n  }, [\n    manualGlobalFilter,\n    globalFilterValue,\n    globalFilter,\n    userFilterTypes,\n    allColumns,\n    rows,\n    flatRows,\n    rowsById,\n    disableGlobalFilter,\n  ])\n\n  const getAutoResetGlobalFilter = useGetLatest(autoResetGlobalFilter)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGlobalFilter()) {\n      dispatch({ type: actions.resetGlobalFilter })\n    }\n  }, [dispatch, manualGlobalFilter ? null : data])\n\n  Object.assign(instance, {\n    preGlobalFilteredRows: rows,\n    preGlobalFilteredFlatRows: flatRows,\n    preGlobalFilteredRowsById: rowsById,\n    globalFilteredRows,\n    globalFilteredFlatRows,\n    globalFilteredRowsById,\n    rows: globalFilteredRows,\n    flatRows: globalFilteredFlatRows,\n    rowsById: globalFilteredRowsById,\n    setGlobalFilter,\n    disableGlobalFilter,\n  })\n}\n","export function sum(values, aggregatedValues) {\n  // It's faster to just add the aggregations together instead of\n  // process leaf nodes individually\n  return aggregatedValues.reduce(\n    (sum, next) => sum + (typeof next === 'number' ? next : 0),\n    0\n  )\n}\n\nexport function min(values) {\n  let min = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n    }\n  })\n\n  return min\n}\n\nexport function max(values) {\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      max = Math.max(max, value)\n    }\n  })\n\n  return max\n}\n\nexport function minMax(values) {\n  let min = 0\n  let max = 0\n\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      min = Math.min(min, value)\n      max = Math.max(max, value)\n    }\n  })\n\n  return `${min}..${max}`\n}\n\nexport function average(values) {\n  return sum(null, values) / values.length\n}\n\nexport function median(values) {\n  if (!values.length) {\n    return null\n  }\n\n  const mid = Math.floor(values.length / 2)\n  const nums = [...values].sort((a, b) => a - b)\n  return values.length % 2 !== 0 ? nums[mid] : (nums[mid - 1] + nums[mid]) / 2\n}\n\nexport function unique(values) {\n  return Array.from(new Set(values).values())\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import React from 'react'\n\nimport * as aggregations from '../aggregations'\n\nimport { getFirstDefined, flattenBy } from '../utils'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst emptyArray = []\nconst emptyObject = {}\n\n// Actions\nactions.resetGroupBy = 'resetGroupBy'\nactions.setGroupBy = 'setGroupBy'\nactions.toggleGroupBy = 'toggleGroupBy'\n\nexport const useGroupBy = hooks => {\n  hooks.getGroupByToggleProps = [defaultGetGroupByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => [\n    ...deps,\n    instance.state.groupBy,\n  ])\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nconst defaultGetGroupByToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canGroupBy\n      ? e => {\n          e.persist()\n          header.toggleGroupBy()\n        }\n      : undefined,\n    style: {\n      cursor: header.canGroupBy ? 'pointer' : undefined,\n    },\n    title: 'Toggle GroupBy',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      groupBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetGroupBy) {\n    return {\n      ...state,\n      groupBy: instance.initialState.groupBy || [],\n    }\n  }\n\n  if (action.type === actions.setGroupBy) {\n    const { value } = action\n    return {\n      ...state,\n      groupBy: value,\n    }\n  }\n\n  if (action.type === actions.toggleGroupBy) {\n    const { columnId, value: setGroupBy } = action\n\n    const resolvedGroupBy =\n      typeof setGroupBy !== 'undefined'\n        ? setGroupBy\n        : !state.groupBy.includes(columnId)\n\n    if (resolvedGroupBy) {\n      return {\n        ...state,\n        groupBy: [...state.groupBy, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      groupBy: state.groupBy.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { groupBy },\n    },\n  }\n) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy\n    .map(g => columns.find(col => col.id === g))\n    .filter(Boolean)\n\n  const nonGroupByColumns = columns.filter(col => !groupBy.includes(col.id))\n\n  columns = [...groupByColumns, ...nonGroupByColumns]\n\n  columns.forEach(column => {\n    column.isGrouped = groupBy.includes(column.id)\n    column.groupedIndex = groupBy.indexOf(column.id)\n  })\n\n  return columns\n}\n\nconst defaultUserAggregations = {}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    aggregations: userAggregations = defaultUserAggregations,\n    plugins,\n    state: { groupBy },\n    dispatch,\n    autoResetGroupBy = true,\n    disableGroupBy,\n    defaultCanGroupBy,\n    getHooks,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useColumnOrder', 'useFilters'], 'useGroupBy')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultGroupBy: defaultColumnGroupBy,\n      disableGroupBy: columnDisableGroupBy,\n    } = column\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          column.canGroupBy,\n          columnDisableGroupBy === true ? false : undefined,\n          disableGroupBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canGroupBy,\n          defaultColumnGroupBy,\n          defaultCanGroupBy,\n          false\n        )\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => instance.toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = React.useCallback(\n    (columnId, value) => {\n      dispatch({ type: actions.toggleGroupBy, columnId, value })\n    },\n    [dispatch]\n  )\n\n  const setGroupBy = React.useCallback(\n    value => {\n      dispatch({ type: actions.setGroupBy, value })\n    },\n    [dispatch]\n  )\n\n  flatHeaders.forEach(header => {\n    header.getGroupByToggleProps = makePropGetter(\n      getHooks().getGroupByToggleProps,\n      { instance: getInstance(), header }\n    )\n  })\n\n  const [\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n  ] = React.useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return [\n        rows,\n        flatRows,\n        rowsById,\n        emptyArray,\n        emptyObject,\n        flatRows,\n        rowsById,\n      ]\n    }\n\n    // Ensure that the list of filtered columns exist\n    const existingGroupBy = groupBy.filter(g =>\n      allColumns.find(col => col.id === g)\n    )\n\n    // Find the columns that can or are aggregating\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (leafRows, groupedRows, depth) => {\n      const values = {}\n\n      allColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (existingGroupBy.includes(column.id)) {\n          values[column.id] = groupedRows[0]\n            ? groupedRows[0].values[column.id]\n            : null\n          return\n        }\n\n        // Get the columnValues to aggregate\n        const groupedValues = groupedRows.map(row => row.values[column.id])\n\n        // Get the columnValues to aggregate\n        const leafValues = leafRows.map(row => {\n          let columnValue = row.values[column.id]\n\n          if (!depth && column.aggregateValue) {\n            const aggregateValueFn =\n              typeof column.aggregateValue === 'function'\n                ? column.aggregateValue\n                : userAggregations[column.aggregateValue] ||\n                  aggregations[column.aggregateValue]\n\n            if (!aggregateValueFn) {\n              console.info({ column })\n              throw new Error(\n                `React Table: Invalid column.aggregateValue option for column listed above`\n              )\n            }\n\n            columnValue = aggregateValueFn(columnValue, row, column)\n          }\n          return columnValue\n        })\n\n        // Aggregate the values\n        let aggregateFn =\n          typeof column.aggregate === 'function'\n            ? column.aggregate\n            : userAggregations[column.aggregate] ||\n              aggregations[column.aggregate]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(leafValues, groupedValues)\n        } else if (column.aggregate) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid column.aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n\n      return values\n    }\n\n    let groupedFlatRows = []\n    const groupedRowsById = {}\n    const onlyGroupedFlatRows = []\n    const onlyGroupedRowsById = {}\n    const nonGroupedFlatRows = []\n    const nonGroupedRowsById = {}\n\n    // Recursively group the data\n    const groupUpRecursively = (rows, depth = 0, parentId) => {\n      // This is the last level, just return the rows\n      if (depth === existingGroupBy.length) {\n        return rows\n      }\n\n      const columnId = existingGroupBy[depth]\n\n      // Group the rows together for this level\n      let rowGroupsMap = groupByFn(rows, columnId)\n\n      // Peform aggregations for each group\n      const aggregatedGroupedRows = Object.entries(rowGroupsMap).map(\n        ([groupByVal, groupedRows], index) => {\n          let id = `${columnId}:${groupByVal}`\n          id = parentId ? `${parentId}>${id}` : id\n\n          // First, Recurse to group sub rows before aggregation\n          const subRows = groupUpRecursively(groupedRows, depth + 1, id)\n\n          // Flatten the leaf rows of the rows in this group\n          const leafRows = depth\n            ? flattenBy(groupedRows, 'leafRows')\n            : groupedRows\n\n          const values = aggregateRowsToValues(leafRows, groupedRows, depth)\n\n          const row = {\n            id,\n            isGrouped: true,\n            groupByID: columnId,\n            groupByVal,\n            values,\n            subRows,\n            leafRows,\n            depth,\n            index,\n          }\n\n          subRows.forEach(subRow => {\n            groupedFlatRows.push(subRow)\n            groupedRowsById[subRow.id] = subRow\n            if (subRow.isGrouped) {\n              onlyGroupedFlatRows.push(subRow)\n              onlyGroupedRowsById[subRow.id] = subRow\n            } else {\n              nonGroupedFlatRows.push(subRow)\n              nonGroupedRowsById[subRow.id] = subRow\n            }\n          })\n\n          return row\n        }\n      )\n\n      return aggregatedGroupedRows\n    }\n\n    const groupedRows = groupUpRecursively(rows)\n\n    groupedRows.forEach(subRow => {\n      groupedFlatRows.push(subRow)\n      groupedRowsById[subRow.id] = subRow\n      if (subRow.isGrouped) {\n        onlyGroupedFlatRows.push(subRow)\n        onlyGroupedRowsById[subRow.id] = subRow\n      } else {\n        nonGroupedFlatRows.push(subRow)\n        nonGroupedRowsById[subRow.id] = subRow\n      }\n    })\n\n    // Assign the new data\n    return [\n      groupedRows,\n      groupedFlatRows,\n      groupedRowsById,\n      onlyGroupedFlatRows,\n      onlyGroupedRowsById,\n      nonGroupedFlatRows,\n      nonGroupedRowsById,\n    ]\n  }, [\n    manualGroupBy,\n    groupBy,\n    rows,\n    flatRows,\n    rowsById,\n    allColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  const getAutoResetGroupBy = useGetLatest(autoResetGroupBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetGroupBy()) {\n      dispatch({ type: actions.resetGroupBy })\n    }\n  }, [dispatch, manualGroupBy ? null : data])\n\n  Object.assign(instance, {\n    preGroupedRows: rows,\n    preGroupedFlatRow: flatRows,\n    preGroupedRowsById: rowsById,\n    groupedRows,\n    groupedFlatRows,\n    groupedRowsById,\n    onlyGroupedFlatRows,\n    onlyGroupedRowsById,\n    nonGroupedFlatRows,\n    nonGroupedRowsById,\n    rows: groupedRows,\n    flatRows: groupedFlatRows,\n    rowsById: groupedRowsById,\n    toggleGroupBy,\n    setGroupBy,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the groupBy and the pivot cell for the row\n    cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n    // Placeholder cells are any columns in the groupBy that are not grouped\n    cell.isPlaceholder = !cell.isGrouped && cell.column.isGrouped\n    // Aggregated cells are not grouped, not repeated, but still have subRows\n    cell.isAggregated =\n      !cell.isGrouped && !cell.isPlaceholder && row.subRows?.length\n  })\n}\n\nexport function defaultGroupByFn(rows, columnId) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnId]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnId) => {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\nexport function datetime(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnId) {\n  let a = getRowValueByColumnID(rowA, columnId)\n  let b = getRowValueByColumnID(rowB, columnId)\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValueByColumnID(row, columnId) {\n  return row.values[columnId]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\n\nimport {\n  actions,\n  ensurePluginOrder,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, isFunction } from '../utils'\n\nimport * as sortTypes from '../sortTypes'\n\n// Actions\nactions.resetSortBy = 'resetSortBy'\nactions.setSortBy = 'setSortBy'\nactions.toggleSortBy = 'toggleSortBy'\nactions.clearSortBy = 'clearSortBy'\n\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\nexport const useSortBy = hooks => {\n  hooks.getSortByToggleProps = [defaultGetSortByToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nconst defaultGetSortByToggleProps = (props, { instance, column }) => {\n  const { isMultiSortEvent = e => e.shiftKey } = instance\n\n  return [\n    props,\n    {\n      onClick: column.canSort\n        ? e => {\n            e.persist()\n            column.toggleSortBy(\n              undefined,\n              !instance.disableMultiSort && isMultiSortEvent(e)\n            )\n          }\n        : undefined,\n      style: {\n        cursor: column.canSort ? 'pointer' : undefined,\n      },\n      title: column.canSort ? 'Toggle SortBy' : undefined,\n    },\n  ]\n}\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      sortBy: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSortBy) {\n    return {\n      ...state,\n      sortBy: instance.initialState.sortBy || [],\n    }\n  }\n\n  if (action.type === actions.clearSortBy) {\n    const { sortBy } = state\n    const newSortBy = sortBy.filter(d => d.id !== action.columnId)\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n\n  if (action.type === actions.setSortBy) {\n    const { sortBy } = action\n    return {\n      ...state,\n      sortBy,\n    }\n  }\n\n  if (action.type === actions.toggleSortBy) {\n    const { columnId, desc, multi } = action\n\n    const {\n      allColumns,\n      disableMultiSort,\n      disableSortRemove,\n      disableMultiRemove,\n      maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    } = instance\n\n    const { sortBy } = state\n\n    // Find the column for this columnId\n    const column = allColumns.find(d => d.id === columnId)\n    const { sortDescFirst } = column\n\n    // Find any existing sortBy for this column\n    const existingSortBy = sortBy.find(d => d.id === columnId)\n    const existingIndex = sortBy.findIndex(d => d.id === columnId)\n    const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n    let newSortBy = []\n\n    // What should we do with this sort action?\n    let sortAction\n\n    if (!disableMultiSort && multi) {\n      if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'add'\n      }\n    } else {\n      // Normal mode\n      if (existingIndex !== sortBy.length - 1 || sortBy.length !== 1) {\n        sortAction = 'replace'\n      } else if (existingSortBy) {\n        sortAction = 'toggle'\n      } else {\n        sortAction = 'replace'\n      }\n    }\n\n    // Handle toggle states that will remove the sortBy\n    if (\n      sortAction === 'toggle' && // Must be toggling\n      !disableSortRemove && // If disableSortRemove, disable in general\n      !hasDescDefined && // Must not be setting desc\n      (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n      ((existingSortBy && // Finally, detect if it should indeed be removed\n        existingSortBy.desc &&\n        !sortDescFirst) ||\n        (!existingSortBy.desc && sortDescFirst))\n    ) {\n      sortAction = 'remove'\n    }\n\n    if (sortAction === 'replace') {\n      newSortBy = [\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n    } else if (sortAction === 'add') {\n      newSortBy = [\n        ...sortBy,\n        {\n          id: columnId,\n          desc: hasDescDefined ? desc : sortDescFirst,\n        },\n      ]\n      // Take latest n columns\n      newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n    } else if (sortAction === 'toggle') {\n      // This flips (or sets) the\n      newSortBy = sortBy.map(d => {\n        if (d.id === columnId) {\n          return {\n            ...d,\n            desc: hasDescDefined ? desc : !existingSortBy.desc,\n          }\n        }\n        return d\n      })\n    } else if (sortAction === 'remove') {\n      newSortBy = sortBy.filter(d => d.id !== columnId)\n    }\n\n    return {\n      ...state,\n      sortBy: newSortBy,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSortBy,\n    defaultCanSort,\n    disableSortBy,\n    flatHeaders,\n    state: { sortBy },\n    dispatch,\n    plugins,\n    getHooks,\n    autoResetSortBy = true,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGlobalFilter', 'useGroupBy', 'usePivotColumns'],\n    'useSortBy'\n  )\n\n  const setSortBy = React.useCallback(\n    sortBy => {\n      dispatch({ type: actions.setSortBy, sortBy })\n    },\n    [dispatch]\n  )\n\n  // Updates sorting based on a columnId, desc flag and multi flag\n  const toggleSortBy = React.useCallback(\n    (columnId, desc, multi) => {\n      dispatch({ type: actions.toggleSortBy, columnId, desc, multi })\n    },\n    [dispatch]\n  )\n\n  // use reference to avoid memory leak in #1608\n  const getInstance = useGetLatest(instance)\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const {\n      accessor,\n      canSort: defaultColumnCanSort,\n      disableSortBy: columnDisableSortBy,\n      id,\n    } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSortBy === true ? false : undefined,\n          disableSortBy === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(defaultCanSort, defaultColumnCanSort, false)\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSortBy = () => {\n        dispatch({ type: actions.clearSortBy, columnId: column.id })\n      }\n    }\n\n    column.getSortByToggleProps = makePropGetter(\n      getHooks().getSortByToggleProps,\n      {\n        instance: getInstance(),\n        column,\n      }\n    )\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const [sortedRows, sortedFlatRows] = React.useMemo(() => {\n    if (manualSortBy || !sortBy.length) {\n      return [rows, flatRows]\n    }\n\n    const sortedFlatRows = []\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      allColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id, sort.desc)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = allColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        sortedFlatRows.push(row)\n        if (!row.subRows) {\n          return\n        } else if (row.subRows.length === 1) {\n          sortedFlatRows.push(row.subRows[0])\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    return [sortData(rows), sortedFlatRows]\n  }, [\n    manualSortBy,\n    sortBy,\n    rows,\n    flatRows,\n    allColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  const getAutoResetSortBy = useGetLatest(autoResetSortBy)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSortBy()) {\n      dispatch({ type: actions.resetSortBy })\n    }\n  }, [manualSortBy ? null : data])\n\n  Object.assign(instance, {\n    preSortedRows: rows,\n    preSortedFlatRows: flatRows,\n    sortedRows,\n    sortedFlatRows,\n    rows: sortedRows,\n    flatRows: sortedFlatRows,\n    setSortBy,\n    toggleSortBy,\n  })\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n","import React from 'react'\n\n//\n\nimport {\n  actions,\n  ensurePluginOrder,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { expandRows } from '../utils'\n\nconst pluginName = 'usePagination'\n\n// Actions\nactions.resetPage = 'resetPage'\nactions.gotoPage = 'gotoPage'\nactions.setPageSize = 'setPageSize'\n\nexport const usePagination = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n}\n\nusePagination.pluginName = pluginName\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pageSize: 10,\n      pageIndex: 0,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPage) {\n    return {\n      ...state,\n      pageIndex: instance.initialState.pageIndex || 0,\n    }\n  }\n\n  if (action.type === actions.gotoPage) {\n    const { pageCount, page } = instance\n    const newPageIndex = functionalUpdate(action.pageIndex, state.pageIndex)\n    let canNavigate = false\n\n    if (newPageIndex > state.pageIndex) {\n      // next page\n      canNavigate =\n        pageCount === -1\n          ? page.length >= state.pageSize\n          : newPageIndex <= pageCount\n    } else if (newPageIndex < state.pageIndex) {\n      // prev page\n      canNavigate = newPageIndex > -1\n    }\n\n    if (!canNavigate) {\n      return state\n    }\n\n    return {\n      ...state,\n      pageIndex: newPageIndex,\n    }\n  }\n\n  if (action.type === actions.setPageSize) {\n    const { pageSize } = action\n    const topRowIndex = state.pageSize * state.pageIndex\n    const pageIndex = Math.floor(topRowIndex / pageSize)\n\n    return {\n      ...state,\n      pageIndex,\n      pageSize,\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const {\n    rows,\n    autoResetPage = true,\n    manualExpandedKey = 'expanded',\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: {\n      pageSize,\n      pageIndex,\n      expanded,\n      globalFilter,\n      filters,\n      groupBy,\n      sortBy,\n    },\n    dispatch,\n    data,\n    manualPagination,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useGlobalFilter', 'useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination'\n  )\n\n  const getAutoResetPage = useGetLatest(autoResetPage)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPage()) {\n      dispatch({ type: actions.resetPage })\n    }\n  }, [\n    dispatch,\n    manualPagination ? null : data,\n    globalFilter,\n    filters,\n    groupBy,\n    sortBy,\n  ])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () =>\n      pageCount > 0\n        ? [...new Array(pageCount)].fill(null).map((d, i) => i)\n        : [],\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage =\n    pageCount === -1 ? page.length >= pageSize : pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    pageIndex => {\n      dispatch({ type: actions.gotoPage, pageIndex })\n    },\n    [dispatch]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      dispatch({ type: actions.setPageSize, pageSize })\n    },\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n  })\n}\n","/* istanbul ignore file */\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nimport { flattenColumns, getFirstDefined } from '../utils'\n\n// Actions\nactions.resetPivot = 'resetPivot'\nactions.togglePivot = 'togglePivot'\n\nexport const _UNSTABLE_usePivotColumns = hooks => {\n  hooks.getPivotToggleProps = [defaultGetPivotToggleProps]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstanceAfterData.push(useInstanceAfterData)\n  hooks.allColumns.push(allColumns)\n  hooks.accessValue.push(accessValue)\n  hooks.materializedColumns.push(materializedColumns)\n  hooks.materializedColumnsDeps.push(materializedColumnsDeps)\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.visibleColumnsDeps.push(visibleColumnsDeps)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\n_UNSTABLE_usePivotColumns.pluginName = 'usePivotColumns'\n\nconst defaultPivotColumns = []\n\nconst defaultGetPivotToggleProps = (props, { header }) => [\n  props,\n  {\n    onClick: header.canPivot\n      ? e => {\n          e.persist()\n          header.togglePivot()\n        }\n      : undefined,\n    style: {\n      cursor: header.canPivot ? 'pointer' : undefined,\n    },\n    title: 'Toggle Pivot',\n  },\n]\n\n// Reducer\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      pivotColumns: defaultPivotColumns,\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetPivot) {\n    return {\n      ...state,\n      pivotColumns: instance.initialState.pivotColumns || defaultPivotColumns,\n    }\n  }\n\n  if (action.type === actions.togglePivot) {\n    const { columnId, value: setPivot } = action\n\n    const resolvedPivot =\n      typeof setPivot !== 'undefined'\n        ? setPivot\n        : !state.pivotColumns.includes(columnId)\n\n    if (resolvedPivot) {\n      return {\n        ...state,\n        pivotColumns: [...state.pivotColumns, columnId],\n      }\n    }\n\n    return {\n      ...state,\n      pivotColumns: state.pivotColumns.filter(d => d !== columnId),\n    }\n  }\n}\n\nfunction useInstanceAfterData(instance) {\n  instance.allColumns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n  })\n}\n\nfunction allColumns(columns, { instance }) {\n  columns.forEach(column => {\n    column.isPivotSource = instance.state.pivotColumns.includes(column.id)\n    column.uniqueValues = new Set()\n  })\n  return columns\n}\n\nfunction accessValue(value, { column }) {\n  if (column.uniqueValues && typeof value !== 'undefined') {\n    column.uniqueValues.add(value)\n  }\n  return value\n}\n\nfunction materializedColumns(materialized, { instance }) {\n  const { allColumns, state } = instance\n\n  if (!state.pivotColumns.length || !state.groupBy || !state.groupBy.length) {\n    return materialized\n  }\n\n  const pivotColumns = state.pivotColumns\n    .map(id => allColumns.find(d => d.id === id))\n    .filter(Boolean)\n\n  const sourceColumns = allColumns.filter(\n    d =>\n      !d.isPivotSource &&\n      !state.groupBy.includes(d.id) &&\n      !state.pivotColumns.includes(d.id)\n  )\n\n  const buildPivotColumns = (depth = 0, parent, pivotFilters = []) => {\n    const pivotColumn = pivotColumns[depth]\n\n    if (!pivotColumn) {\n      return sourceColumns.map(sourceColumn => {\n        // TODO: We could offer support here for renesting pivoted\n        // columns inside copies of their header groups. For now,\n        // that seems like it would be (1) overkill on nesting, considering\n        // you already get nesting for every pivot level and (2)\n        // really hard. :)\n\n        return {\n          ...sourceColumn,\n          canPivot: false,\n          isPivoted: true,\n          parent,\n          depth: depth,\n          id: `${parent ? `${parent.id}.${sourceColumn.id}` : sourceColumn.id}`,\n          accessor: (originalRow, i, row) => {\n            if (pivotFilters.every(filter => filter(row))) {\n              return row.values[sourceColumn.id]\n            }\n          },\n        }\n      })\n    }\n\n    const uniqueValues = Array.from(pivotColumn.uniqueValues).sort()\n\n    return uniqueValues.map(uniqueValue => {\n      const columnGroup = {\n        ...pivotColumn,\n        Header:\n          pivotColumn.PivotHeader || typeof pivotColumn.header === 'string'\n            ? `${pivotColumn.Header}: ${uniqueValue}`\n            : uniqueValue,\n        isPivotGroup: true,\n        parent,\n        depth,\n        id: parent\n          ? `${parent.id}.${pivotColumn.id}.${uniqueValue}`\n          : `${pivotColumn.id}.${uniqueValue}`,\n        pivotValue: uniqueValue,\n      }\n\n      columnGroup.columns = buildPivotColumns(depth + 1, columnGroup, [\n        ...pivotFilters,\n        row => row.values[pivotColumn.id] === uniqueValue,\n      ])\n\n      return columnGroup\n    })\n  }\n\n  const newMaterialized = flattenColumns(buildPivotColumns())\n\n  return [...materialized, ...newMaterialized]\n}\n\nfunction materializedColumnsDeps(\n  deps,\n  {\n    instance: {\n      state: { pivotColumns, groupBy },\n    },\n  }\n) {\n  return [...deps, pivotColumns, groupBy]\n}\n\nfunction visibleColumns(visibleColumns, { instance: { state } }) {\n  visibleColumns = visibleColumns.filter(d => !d.isPivotSource)\n\n  if (state.pivotColumns.length && state.groupBy && state.groupBy.length) {\n    visibleColumns = visibleColumns.filter(\n      column => column.isGrouped || column.isPivoted\n    )\n  }\n\n  return visibleColumns\n}\n\nfunction visibleColumnsDeps(deps, { instance }) {\n  return [...deps, instance.state.pivotColumns, instance.state.groupBy]\n}\n\nfunction useInstance(instance) {\n  const {\n    columns,\n    allColumns,\n    flatHeaders,\n    // pivotFn = defaultPivotFn,\n    // manualPivot,\n    getHooks,\n    plugins,\n    dispatch,\n    autoResetPivot = true,\n    manaulPivot,\n    disablePivot,\n    defaultCanPivot,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useGroupBy'], 'usePivotColumns')\n\n  const getInstance = useGetLatest(instance)\n\n  allColumns.forEach(column => {\n    const {\n      accessor,\n      defaultPivot: defaultColumnPivot,\n      disablePivot: columnDisablePivot,\n    } = column\n\n    column.canPivot = accessor\n      ? getFirstDefined(\n          column.canPivot,\n          columnDisablePivot === true ? false : undefined,\n          disablePivot === true ? false : undefined,\n          true\n        )\n      : getFirstDefined(\n          column.canPivot,\n          defaultColumnPivot,\n          defaultCanPivot,\n          false\n        )\n\n    if (column.canPivot) {\n      column.togglePivot = () => instance.togglePivot(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const togglePivot = (columnId, value) => {\n    dispatch({ type: actions.togglePivot, columnId, value })\n  }\n\n  flatHeaders.forEach(header => {\n    header.getPivotToggleProps = makePropGetter(\n      getHooks().getPivotToggleProps,\n      {\n        instance: getInstance(),\n        header,\n      }\n    )\n  })\n\n  const getAutoResetPivot = useGetLatest(autoResetPivot)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetPivot()) {\n      dispatch({ type: actions.resetPivot })\n    }\n  }, [dispatch, manaulPivot ? null : columns])\n\n  Object.assign(instance, {\n    togglePivot,\n  })\n}\n\nfunction prepareRow(row) {\n  row.allCells.forEach(cell => {\n    // Grouped cells are in the pivotColumns and the pivot cell for the row\n    cell.isPivoted = cell.column.isPivoted\n  })\n}\n","import React from 'react'\n\nimport {\n  actions,\n  makePropGetter,\n  ensurePluginOrder,\n  useGetLatest,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nconst pluginName = 'useRowSelect'\n\n// Actions\nactions.resetSelectedRows = 'resetSelectedRows'\nactions.toggleAllRowsSelected = 'toggleAllRowsSelected'\nactions.toggleRowSelected = 'toggleRowSelected'\nactions.toggleAllPageRowsSelected = 'toggleAllPageRowsSelected'\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = [defaultGetToggleRowSelectedProps]\n  hooks.getToggleAllRowsSelectedProps = [defaultGetToggleAllRowsSelectedProps]\n  hooks.getToggleAllPageRowsSelectedProps = [\n    defaultGetToggleAllPageRowsSelectedProps,\n  ]\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowSelect.pluginName = pluginName\n\nconst defaultGetToggleRowSelectedProps = (props, { instance, row }) => {\n  const { manualRowSelectedKey = 'isSelected' } = instance\n  let checked = false\n\n  if (row.original && row.original[manualRowSelectedKey]) {\n    checked = true\n  } else {\n    checked = row.isSelected\n  }\n\n  return [\n    props,\n    {\n      onChange: e => {\n        row.toggleRowSelected(e.target.checked)\n      },\n      style: {\n        cursor: 'pointer',\n      },\n      checked,\n      title: 'Toggle Row Selected',\n      indeterminate: row.isSomeSelected,\n    },\n  ]\n}\n\nconst defaultGetToggleAllRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange: e => {\n      instance.toggleAllRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllRowsSelected,\n    title: 'Toggle All Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllRowsSelected &&\n        Object.keys(instance.state.selectedRowIds).length\n    ),\n  },\n]\n\nconst defaultGetToggleAllPageRowsSelectedProps = (props, { instance }) => [\n  props,\n  {\n    onChange(e) {\n      instance.toggleAllPageRowsSelected(e.target.checked)\n    },\n    style: {\n      cursor: 'pointer',\n    },\n    checked: instance.isAllPageRowsSelected,\n    title: 'Toggle All Current Page Rows Selected',\n    indeterminate: Boolean(\n      !instance.isAllPageRowsSelected &&\n        instance.page.some(({ id }) => instance.state.selectedRowIds[id])\n    ),\n  },\n]\n\n// eslint-disable-next-line max-params\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      selectedRowIds: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetSelectedRows) {\n    return {\n      ...state,\n      selectedRowIds: instance.initialState.selectedRowIds || {},\n    }\n  }\n\n  if (action.type === actions.toggleAllRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      isAllRowsSelected,\n      rowsById,\n      nonGroupedRowsById = rowsById,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllRowsSelected\n\n    // Only remove/add the rows that are visible on the screen\n    //  Leave all the other rows that are selected alone.\n    const selectedRowIds = Object.assign({}, state.selectedRowIds)\n\n    if (selectAll) {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        selectedRowIds[rowId] = true\n      })\n    } else {\n      Object.keys(nonGroupedRowsById).forEach(rowId => {\n        delete selectedRowIds[rowId]\n      })\n    }\n\n    return {\n      ...state,\n      selectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleRowSelected) {\n    const { id, value: setSelected } = action\n    const { rowsById, selectSubRows = true, getSubRows } = instance\n\n    // Join the ids of deep rows\n    // to make a key, then manage all of the keys\n    // in a flat object\n    const row = rowsById[id]\n    const isSelected = row.isSelected\n    const shouldExist =\n      typeof setSelected !== 'undefined' ? setSelected : !isSelected\n\n    if (isSelected === shouldExist) {\n      return state\n    }\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (shouldExist) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    handleRowById(id)\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n\n  if (action.type === actions.toggleAllPageRowsSelected) {\n    const { value: setSelected } = action\n    const {\n      page,\n      rowsById,\n      selectSubRows = true,\n      isAllPageRowsSelected,\n      getSubRows,\n    } = instance\n\n    const selectAll =\n      typeof setSelected !== 'undefined' ? setSelected : !isAllPageRowsSelected\n\n    const newSelectedRowIds = { ...state.selectedRowIds }\n\n    const handleRowById = id => {\n      const row = rowsById[id]\n\n      if (!row.isGrouped) {\n        if (selectAll) {\n          newSelectedRowIds[id] = true\n        } else {\n          delete newSelectedRowIds[id]\n        }\n      }\n\n      if (selectSubRows && getSubRows(row)) {\n        return getSubRows(row).forEach(row => handleRowById(row.id))\n      }\n    }\n\n    page.forEach(row => handleRowById(row.id))\n\n    return {\n      ...state,\n      selectedRowIds: newSelectedRowIds,\n    }\n  }\n  return state\n}\n\nfunction useInstance(instance) {\n  const {\n    data,\n    rows,\n    getHooks,\n    plugins,\n    rowsById,\n    nonGroupedRowsById = rowsById,\n    autoResetSelectedRows = true,\n    state: { selectedRowIds },\n    selectSubRows = true,\n    dispatch,\n    page,\n    getSubRows,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded', 'usePagination'],\n    'useRowSelect'\n  )\n\n  const selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n\n    rows.forEach(row => {\n      const isSelected = selectSubRows\n        ? getRowIsSelected(row, selectedRowIds, getSubRows)\n        : !!selectedRowIds[row.id]\n      row.isSelected = !!isSelected\n      row.isSomeSelected = isSelected === null\n\n      if (isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectSubRows, selectedRowIds, getSubRows])\n\n  let isAllRowsSelected = Boolean(\n    Object.keys(nonGroupedRowsById).length && Object.keys(selectedRowIds).length\n  )\n\n  let isAllPageRowsSelected = isAllRowsSelected\n\n  if (isAllRowsSelected) {\n    if (Object.keys(nonGroupedRowsById).some(id => !selectedRowIds[id])) {\n      isAllRowsSelected = false\n    }\n  }\n\n  if (!isAllRowsSelected) {\n    if (page && page.length && page.some(({ id }) => !selectedRowIds[id])) {\n      isAllPageRowsSelected = false\n    }\n  }\n\n  const getAutoResetSelectedRows = useGetLatest(autoResetSelectedRows)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetSelectedRows()) {\n      dispatch({ type: actions.resetSelectedRows })\n    }\n  }, [dispatch, data])\n\n  const toggleAllRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleAllPageRowsSelected = React.useCallback(\n    value => dispatch({ type: actions.toggleAllPageRowsSelected, value }),\n    [dispatch]\n  )\n\n  const toggleRowSelected = React.useCallback(\n    (id, value) => dispatch({ type: actions.toggleRowSelected, id, value }),\n    [dispatch]\n  )\n\n  const getInstance = useGetLatest(instance)\n\n  const getToggleAllRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  const getToggleAllPageRowsSelectedProps = makePropGetter(\n    getHooks().getToggleAllPageRowsSelectedProps,\n    { instance: getInstance() }\n  )\n\n  Object.assign(instance, {\n    selectedFlatRows,\n    isAllRowsSelected,\n    isAllPageRowsSelected,\n    toggleRowSelected,\n    toggleAllRowsSelected,\n    getToggleAllRowsSelectedProps,\n    getToggleAllPageRowsSelectedProps,\n    toggleAllPageRowsSelected,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  row.toggleRowSelected = set => instance.toggleRowSelected(row.id, set)\n\n  row.getToggleRowSelectedProps = makePropGetter(\n    instance.getHooks().getToggleRowSelectedProps,\n    { instance: instance, row }\n  )\n}\n\nfunction getRowIsSelected(row, selectedRowIds, getSubRows) {\n  if (selectedRowIds[row.id]) {\n    return true\n  }\n\n  const subRows = getSubRows(row)\n\n  if (subRows && subRows.length) {\n    let allChildrenSelected = true\n    let someSelected = false\n\n    subRows.forEach(subRow => {\n      // Bail out early if we know both of these\n      if (someSelected && !allChildrenSelected) {\n        return\n      }\n\n      if (getRowIsSelected(subRow, selectedRowIds, getSubRows)) {\n        someSelected = true\n      } else {\n        allChildrenSelected = false\n      }\n    })\n    return allChildrenSelected ? true : someSelected ? null : false\n  }\n\n  return false\n}\n","import React from 'react'\n\nimport {\n  actions,\n  functionalUpdate,\n  useMountedLayoutEffect,\n  useGetLatest,\n} from '../publicUtils'\n\nconst defaultInitialRowStateAccessor = originalRow => ({})\nconst defaultInitialCellStateAccessor = originalRow => ({})\n\n// Actions\nactions.setRowState = 'setRowState'\nactions.setCellState = 'setCellState'\nactions.resetRowState = 'resetRowState'\n\nexport const useRowState = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.prepareRow.push(prepareRow)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction reducer(state, action, previousState, instance) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    rowsById,\n  } = instance\n\n  if (action.type === actions.init) {\n    return {\n      rowState: {},\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetRowState) {\n    return {\n      ...state,\n      rowState: instance.initialState.rowState || {},\n    }\n  }\n\n  if (action.type === actions.setRowState) {\n    const { rowId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: functionalUpdate(value, oldRowState),\n      },\n    }\n  }\n\n  if (action.type === actions.setCellState) {\n    const { rowId, columnId, value } = action\n\n    const oldRowState =\n      typeof state.rowState[rowId] !== 'undefined'\n        ? state.rowState[rowId]\n        : initialRowStateAccessor(rowsById[rowId].original)\n\n    const oldCellState =\n      typeof oldRowState?.cellState?.[columnId] !== 'undefined'\n        ? oldRowState.cellState[columnId]\n        : initialCellStateAccessor(rowsById[rowId].original)\n\n    return {\n      ...state,\n      rowState: {\n        ...state.rowState,\n        [rowId]: {\n          ...oldRowState,\n          cellState: {\n            ...(oldRowState.cellState || {}),\n            [columnId]: functionalUpdate(value, oldCellState),\n          },\n        },\n      },\n    }\n  }\n}\n\nfunction useInstance(instance) {\n  const { autoResetRowState = true, data, dispatch } = instance\n\n  const setRowState = React.useCallback(\n    (rowId, value) =>\n      dispatch({\n        type: actions.setRowState,\n        rowId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const setCellState = React.useCallback(\n    (rowId, columnId, value) =>\n      dispatch({\n        type: actions.setCellState,\n        rowId,\n        columnId,\n        value,\n      }),\n    [dispatch]\n  )\n\n  const getAutoResetRowState = useGetLatest(autoResetRowState)\n\n  useMountedLayoutEffect(() => {\n    if (getAutoResetRowState()) {\n      dispatch({ type: actions.resetRowState })\n    }\n  }, [data])\n\n  Object.assign(instance, {\n    setRowState,\n    setCellState,\n  })\n}\n\nfunction prepareRow(row, { instance }) {\n  const {\n    initialRowStateAccessor = defaultInitialRowStateAccessor,\n    initialCellStateAccessor = defaultInitialCellStateAccessor,\n    state: { rowState },\n  } = instance\n\n  if (row.original) {\n    row.state =\n      typeof rowState[row.id] !== 'undefined'\n        ? rowState[row.id]\n        : initialRowStateAccessor(row.original)\n\n    row.setState = updater => {\n      return instance.setRowState(row.id, updater)\n    }\n\n    row.cells.forEach(cell => {\n      if (!row.state.cellState) {\n        row.state.cellState = {}\n      }\n\n      cell.state =\n        typeof row.state.cellState[cell.column.id] !== 'undefined'\n          ? row.state.cellState[cell.column.id]\n          : initialCellStateAccessor(row.original)\n\n      cell.setState = updater => {\n        return instance.setCellState(row.id, cell.column.id, updater)\n      }\n    })\n  }\n}\n","import React from 'react'\n\nimport { functionalUpdate, actions } from '../publicUtils'\n\n// Actions\nactions.resetColumnOrder = 'resetColumnOrder'\nactions.setColumnOrder = 'setColumnOrder'\n\nexport const useColumnOrder = hooks => {\n  hooks.stateReducers.push(reducer)\n  hooks.visibleColumnsDeps.push((deps, { instance }) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.visibleColumns.push(visibleColumns)\n  hooks.useInstance.push(useInstance)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction reducer(state, action, previousState, instance) {\n  if (action.type === actions.init) {\n    return {\n      columnOrder: [],\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetColumnOrder) {\n    return {\n      ...state,\n      columnOrder: instance.initialState.columnOrder || [],\n    }\n  }\n\n  if (action.type === actions.setColumnOrder) {\n    return {\n      ...state,\n      columnOrder: functionalUpdate(action.columnOrder, state.columnOrder),\n    }\n  }\n}\n\nfunction visibleColumns(\n  columns,\n  {\n    instance: {\n      state: { columnOrder },\n    },\n  }\n) {\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnId = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnId)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useInstance(instance) {\n  const { dispatch } = instance\n\n  instance.setColumnOrder = React.useCallback(\n    columnOrder => {\n      return dispatch({ type: actions.setColumnOrder, columnOrder })\n    },\n    [dispatch]\n  )\n}\n","import React from 'react'\n\nimport {\n  actions,\n  defaultColumn,\n  makePropGetter,\n  useGetLatest,\n  ensurePluginOrder,\n  useMountedLayoutEffect,\n} from '../publicUtils'\n\nimport { getFirstDefined, passiveEventSupported } from '../utils'\n\n// Default Column\ndefaultColumn.canResize = true\n\n// Actions\nactions.columnStartResizing = 'columnStartResizing'\nactions.columnResizing = 'columnResizing'\nactions.columnDoneResizing = 'columnDoneResizing'\nactions.resetResize = 'resetResize'\n\nexport const useResizeColumns = hooks => {\n  hooks.getResizerProps = [defaultGetResizerProps]\n  hooks.getHeaderProps.push({\n    style: {\n      position: 'relative',\n    },\n  })\n  hooks.stateReducers.push(reducer)\n  hooks.useInstance.push(useInstance)\n  hooks.useInstanceBeforeDimensions.push(useInstanceBeforeDimensions)\n}\n\nconst defaultGetResizerProps = (props, { instance, header }) => {\n  const { dispatch } = instance\n\n  const onResizeStart = (e, header) => {\n    let isTouchEvent = false\n    if (e.type === 'touchstart') {\n      // lets not respond to multiple touches (e.g. 2 or 3 fingers)\n      if (e.touches && e.touches.length > 1) {\n        return\n      }\n      isTouchEvent = true\n    }\n    const headersToResize = getLeafHeaders(header)\n    const headerIdWidths = headersToResize.map(d => [d.id, d.totalWidth])\n\n    const clientX = isTouchEvent ? Math.round(e.touches[0].clientX) : e.clientX\n\n    const dispatchMove = clientXPos => {\n      dispatch({ type: actions.columnResizing, clientX: clientXPos })\n    }\n    const dispatchEnd = () => dispatch({ type: actions.columnDoneResizing })\n\n    const handlersAndEvents = {\n      mouse: {\n        moveEvent: 'mousemove',\n        moveHandler: e => dispatchMove(e.clientX),\n        upEvent: 'mouseup',\n        upHandler: e => {\n          document.removeEventListener(\n            'mousemove',\n            handlersAndEvents.mouse.moveHandler\n          )\n          document.removeEventListener(\n            'mouseup',\n            handlersAndEvents.mouse.upHandler\n          )\n          dispatchEnd()\n        },\n      },\n      touch: {\n        moveEvent: 'touchmove',\n        moveHandler: e => {\n          if (e.cancelable) {\n            e.preventDefault()\n            e.stopPropagation()\n          }\n          dispatchMove(e.touches[0].clientX)\n          return false\n        },\n        upEvent: 'touchend',\n        upHandler: e => {\n          document.removeEventListener(\n            handlersAndEvents.touch.moveEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          document.removeEventListener(\n            handlersAndEvents.touch.upEvent,\n            handlersAndEvents.touch.moveHandler\n          )\n          dispatchEnd()\n        },\n      },\n    }\n\n    const events = isTouchEvent\n      ? handlersAndEvents.touch\n      : handlersAndEvents.mouse\n    const passiveIfSupported = passiveEventSupported()\n      ? { passive: false }\n      : false\n    document.addEventListener(\n      events.moveEvent,\n      events.moveHandler,\n      passiveIfSupported\n    )\n    document.addEventListener(\n      events.upEvent,\n      events.upHandler,\n      passiveIfSupported\n    )\n\n    dispatch({\n      type: actions.columnStartResizing,\n      columnId: header.id,\n      columnWidth: header.totalWidth,\n      headerIdWidths,\n      clientX,\n    })\n  }\n\n  return [\n    props,\n    {\n      onMouseDown: e => e.persist() || onResizeStart(e, header),\n      onTouchStart: e => e.persist() || onResizeStart(e, header),\n      style: {\n        cursor: 'ew-resize',\n      },\n      draggable: false,\n      role: 'separator',\n    },\n  ]\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nfunction reducer(state, action) {\n  if (action.type === actions.init) {\n    return {\n      columnResizing: {\n        columnWidths: {},\n      },\n      ...state,\n    }\n  }\n\n  if (action.type === actions.resetResize) {\n    return {\n      ...state,\n      columnResizing: {\n        columnWidths: {},\n      },\n    }\n  }\n\n  if (action.type === actions.columnStartResizing) {\n    const { clientX, columnId, columnWidth, headerIdWidths } = action\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: clientX,\n        headerIdWidths,\n        columnWidth,\n        isResizingColumn: columnId,\n      },\n    }\n  }\n\n  if (action.type === actions.columnResizing) {\n    const { clientX } = action\n    const { startX, columnWidth, headerIdWidths } = state.columnResizing\n\n    const deltaX = clientX - startX\n    const percentageDeltaX = deltaX / columnWidth\n\n    const newColumnWidths = {}\n\n    headerIdWidths.forEach(([headerId, headerWidth]) => {\n      newColumnWidths[headerId] = Math.max(\n        headerWidth + headerWidth * percentageDeltaX,\n        0\n      )\n    })\n\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        columnWidths: {\n          ...state.columnResizing.columnWidths,\n          ...newColumnWidths,\n        },\n      },\n    }\n  }\n\n  if (action.type === actions.columnDoneResizing) {\n    return {\n      ...state,\n      columnResizing: {\n        ...state.columnResizing,\n        startX: null,\n        isResizingColumn: null,\n      },\n    }\n  }\n}\n\nconst useInstanceBeforeDimensions = instance => {\n  const {\n    flatHeaders,\n    disableResizing,\n    getHooks,\n    state: { columnResizing },\n  } = instance\n\n  const getInstance = useGetLatest(instance)\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width =\n      columnResizing.columnWidths[header.id] ||\n      header.originalWidth ||\n      header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = makePropGetter(getHooks().getResizerProps, {\n        instance: getInstance(),\n        header,\n      })\n    }\n  })\n}\n\nfunction useInstance(instance) {\n  const { plugins, dispatch, autoResetResize = true, columns } = instance\n\n  ensurePluginOrder(plugins, ['useAbsoluteLayout'], 'useResizeColumns')\n\n  const getAutoResetResize = useGetLatest(autoResetResize)\n  useMountedLayoutEffect(() => {\n    if (getAutoResetResize()) {\n      dispatch({ type: actions.resetResize })\n    }\n  }, [columns])\n\n  const resetResizing = React.useCallback(\n    () => dispatch({ type: actions.resetResize }),\n    [dispatch]\n  )\n\n  Object.assign(instance, {\n    resetResizing,\n  })\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","const cellStyles = {\n  position: 'absolute',\n  top: 0,\n}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.getTableBodyProps.push(getRowStyles)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        left: `${column.totalLeft}px`,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      position: 'relative',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n","const cellStyles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n}\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      width: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nexport const useBlockLayout = hooks => {\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n\n  hooks.getHeaderProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getCellProps.push((props, { cell }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    },\n  ])\n\n  hooks.getFooterProps.push((props, { column }) => [\n    props,\n    {\n      style: {\n        ...cellStyles,\n        width: `${column.totalWidth}px`,\n      },\n    },\n  ])\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n","export function useFlexLayout(hooks) {\n  hooks.getTableProps.push(getTableProps)\n  hooks.getRowProps.push(getRowStyles)\n  hooks.getHeaderGroupProps.push(getRowStyles)\n  hooks.getFooterGroupProps.push(getRowStyles)\n  hooks.getHeaderProps.push(getHeaderProps)\n  hooks.getCellProps.push(getCellProps)\n  hooks.getFooterProps.push(getFooterProps)\n}\n\nuseFlexLayout.pluginName = 'useFlexLayout'\n\nconst getTableProps = (props, { instance }) => [\n  props,\n  {\n    style: {\n      minWidth: `${instance.totalColumnsWidth}px`,\n    },\n  },\n]\n\nconst getRowStyles = (props, { instance }) => [\n  props,\n  {\n    style: {\n      display: 'flex',\n      flex: '1 0 auto',\n      minWidth: `${instance.totalColumnsMinWidth}px`,\n    },\n  },\n]\n\nconst getHeaderProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n\nconst getCellProps = (props, { cell }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: `${cell.column.totalFlexWidth} 0 auto`,\n      minWidth: `${cell.column.totalMinWidth}px`,\n      width: `${cell.column.totalWidth}px`,\n    },\n  },\n]\n\nconst getFooterProps = (props, { column }) => [\n  props,\n  {\n    style: {\n      boxSizing: 'border-box',\n      flex: column.totalFlexWidth\n        ? `${column.totalFlexWidth} 0 auto`\n        : undefined,\n      minWidth: `${column.totalMinWidth}px`,\n      width: `${column.totalWidth}px`,\n    },\n  },\n]\n"],"names":["actions","init","defaultRenderer","value","emptyRenderer","React","defaultColumn","Cell","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","mergeProps","propList","reduce","props","next","style","className","makePropGetter","hooks","meta","userProps","prev","handlePropGetter","prevProps","Array","isArray","reduceHooks","initial","allowUndefined","loopHooks","context","forEach","hook","ensurePluginOrder","plugins","befores","pluginName","afters","findIndex","plugin","before","functionalUpdate","updater","old","useGetLatest","obj","ref","useRef","current","useCallback","safeUseLayoutEffect","document","useLayoutEffect","useEffect","useMountedLayoutEffect","fn","deps","mountedRef","makeRenderer","instance","column","type","Comp","console","info","Error","flexRender","component","proto","Object","getPrototypeOf","prototype","isReactComponent","isClassComponent","$$typeof","includes","description","isExoticComponent","linkColumnStructure","columns","parent","depth","map","assignColumnAccessor","flattenColumns","flattenBy","id","accessor","Header","accessorPath","split","row","path","def","val","cacheKey","JSON","stringify","pathObj","pathObjCache","get","flattenDeep","arr","newArr","i","length","push","d","String","replace","join","reOpenBracket","reCloseBracket","makePathArray","set","cursor","pathPart","e","getBy","error","assign","decorateColumn","userDefaultColumn","Footer","originalWidth","makeHeaderGroups","allColumns","additionalHeaderProperties","headerGroups","scanColumns","uid","getUID","headerGroup","headers","parentColumns","hasParents","some","newParent","latestParentColumn","reverse","originalId","placeholderOf","Map","getFirstDefined","args","isFunction","a","key","flat","recurse","expandRows","rows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","isExpanded","original","canExpand","subRows","getFilterMethod","filter","userFilterTypes","filterTypes","text","shouldAutoRemoveFilter","autoRemove","unpreparedAccessWarning","passiveSupported","defaultGetTableProps","role","defaultGetTableBodyProps","defaultGetHeaderProps","colSpan","totalVisibleHeaderCount","defaultGetFooterProps","defaultGetHeaderGroupProps","index","defaultGetFooterGroupProps","defaultGetRowProps","defaultGetCellProps","cell","makeDefaultPluginHooks","useOptions","stateReducers","useControlledState","columnsDeps","allColumnsDeps","accessValue","materializedColumns","materializedColumnsDeps","useInstanceAfterData","visibleColumns","visibleColumnsDeps","headerGroupsDeps","useInstanceBeforeDimensions","useInstance","prepareRow","getTableProps","getTableBodyProps","getHeaderGroupProps","getFooterGroupProps","getHeaderProps","getFooterProps","getRowProps","getCellProps","useFinalInstance","resetHiddenColumns","toggleHideColumn","setHiddenColumns","toggleHideAllColumns","useColumnVisibility","getToggleHiddenProps","defaultGetToggleHiddenProps","getToggleHideAllColumnsProps","defaultGetToggleHideAllColumnsProps","reducer","state","hiddenColumns","onChange","toggleHidden","target","checked","isVisible","title","allColumnsHidden","indeterminate","action","previousState","initialState","columnId","subHeader","handleColumn","parentVisible","subColumn","flatHeaders","dispatch","getHooks","autoResetHiddenColumns","getInstance","getAutoResetHiddenColumns","defaultInitialState","defaultColumnInstance","defaultReducer","prevState","defaultGetSubRows","defaultGetRowId","defaultUseControlledState","applyDefaults","getSubRows","getRowId","stateReducer","calculateHeaderWidths","left","sumTotalMinWidth","sumTotalWidth","sumTotalMaxWidth","sumTotalFlexWidth","header","subHeaders","totalLeft","totalMinWidth","totalWidth","totalMaxWidth","totalFlexWidth","Math","min","max","canResize","accessRowsForColumn","data","flatRows","rowsById","accessValueHooks","originalRow","rowIndex","accessRow","parentRows","originalSubRows","cells","values","undefined","resetExpanded","toggleRowExpanded","toggleAllRowsExpanded","useExpanded","getToggleAllRowsExpandedProps","defaultGetToggleAllRowsExpandedProps","getToggleRowExpandedProps","defaultGetToggleRowExpandedProps","onClick","isAllRowsExpanded","keys","rowId","setExpanded","exists","shouldExist","paginateExpandedRows","autoResetExpanded","getAutoResetExpanded","Boolean","useMemo","expandedDepth","maxDepth","splitId","findExpandedDepth","preExpandedRows","ids","filterValue","rowValue","toLowerCase","exactText","exactTextCase","includesAll","every","includesSome","includesValue","exact","equals","between","Infinity","temp","resetFilters","setFilter","setAllFilters","useFilters","filters","find","filterMethod","previousfilter","newFilter","manualFilters","defaultCanFilter","disableFilters","autoResetFilters","columnDefaultCanFilter","columnDisableFilters","canFilter","found","filteredFlatRows","filteredRowsById","filterRows","filteredRows","filteredSoFar","preFilteredRows","warn","getAutoResetFilters","preFilteredFlatRows","preFilteredRowsById","resetGlobalFilter","setGlobalFilter","useGlobalFilter","globalFilter","manualGlobalFilter","globalFilterValue","autoResetGlobalFilter","disableGlobalFilter","columnDisableGlobalFilter","filterableColumns","c","globalFilteredRows","globalFilteredFlatRows","globalFilteredRowsById","getAutoResetGlobalFilter","preGlobalFilteredRows","preGlobalFilteredFlatRows","preGlobalFilteredRowsById","sum","aggregatedValues","mid","floor","nums","sort","b","from","Set","size","emptyArray","emptyObject","resetGroupBy","setGroupBy","toggleGroupBy","useGroupBy","getGroupByToggleProps","defaultGetGroupByToggleProps","groupBy","canGroupBy","persist","resolvedGroupBy","groupByColumns","g","col","nonGroupByColumns","isGrouped","groupedIndex","indexOf","defaultUserAggregations","groupByFn","defaultGroupByFn","manualGroupBy","aggregations","userAggregations","autoResetGroupBy","disableGroupBy","defaultCanGroupBy","defaultColumnGroupBy","defaultGroupBy","columnDisableGroupBy","Aggregated","existingGroupBy","groupedFlatRows","groupedRowsById","onlyGroupedFlatRows","onlyGroupedRowsById","nonGroupedFlatRows","nonGroupedRowsById","groupedRows","groupUpRecursively","parentId","rowGroupsMap","entries","groupByVal","leafRows","groupedValues","leafValues","columnValue","aggregateValue","aggregateValueFn","aggregateFn","aggregate","aggregateRowsToValues","groupByID","subRow","getAutoResetGroupBy","preGroupedRows","preGroupedFlatRow","preGroupedRowsById","allCells","isPlaceholder","isAggregated","_row$subRows","resKey","reSplitAlphaNumeric","compareBasic","getRowValueByColumnID","toString","isNaN","rowA","rowB","aa","shift","bb","an","parseInt","bn","combo","getTime","resetSortBy","setSortBy","toggleSortBy","clearSortBy","sortType","sortDescFirst","useSortBy","getSortByToggleProps","defaultGetSortByToggleProps","isMultiSortEvent","shiftKey","canSort","disableMultiSort","sortBy","sortAction","desc","multi","disableSortRemove","disableMultiRemove","maxMultiSortColCount","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","orderByFn","defaultOrderByFn","userSortTypes","sortTypes","manualSortBy","defaultCanSort","disableSortBy","autoResetSortBy","defaultColumnCanSort","columnDisableSortBy","columnSort","isSorted","sortedIndex","isSortedDesc","sortedFlatRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","sortedRows","getAutoResetSortBy","preSortedRows","preSortedFlatRows","funcs","dirs","sortFn","sortInt","resetPage","gotoPage","setPageSize","usePagination","pageSize","pageIndex","pageCount","page","newPageIndex","canNavigate","topRowIndex","autoResetPage","userPageCount","manualPagination","getAutoResetPage","ceil","pageOptions","fill","pageStart","pageEnd","slice","canPreviousPage","canNextPage","previousPage","nextPage","resetPivot","togglePivot","_UNSTABLE_usePivotColumns","getPivotToggleProps","defaultGetPivotToggleProps","defaultPivotColumns","canPivot","pivotColumns","setPivot","resolvedPivot","isPivotSource","uniqueValues","add","materialized","sourceColumns","newMaterialized","buildPivotColumns","pivotFilters","pivotColumn","uniqueValue","columnGroup","PivotHeader","isPivotGroup","pivotValue","sourceColumn","isPivoted","autoResetPivot","manaulPivot","disablePivot","defaultCanPivot","defaultColumnPivot","defaultPivot","columnDisablePivot","getAutoResetPivot","resetSelectedRows","toggleAllRowsSelected","toggleRowSelected","toggleAllPageRowsSelected","useRowSelect","getToggleRowSelectedProps","defaultGetToggleRowSelectedProps","getToggleAllRowsSelectedProps","defaultGetToggleAllRowsSelectedProps","getToggleAllPageRowsSelectedProps","defaultGetToggleAllPageRowsSelectedProps","manualRowSelectedKey","isSelected","isSomeSelected","isAllRowsSelected","selectedRowIds","isAllPageRowsSelected","setSelected","selectAll","selectSubRows","newSelectedRowIds","handleRowById","autoResetSelectedRows","selectedFlatRows","getRowIsSelected","allChildrenSelected","someSelected","getAutoResetSelectedRows","defaultInitialRowStateAccessor","defaultInitialCellStateAccessor","setRowState","setCellState","resetRowState","useRowState","initialRowStateAccessor","initialCellStateAccessor","rowState","oldRowState","oldCellState","cellState","_oldRowState$cellStat","autoResetRowState","getAutoResetRowState","setState","resetColumnOrder","setColumnOrder","useColumnOrder","columnOrder","columnOrderCopy","columnsCopy","columnsInOrder","targetColumnId","foundIndex","columnStartResizing","columnResizing","columnDoneResizing","resetResize","useResizeColumns","getResizerProps","defaultGetResizerProps","position","onResizeStart","isTouchEvent","touches","headerIdWidths","leafHeaders","recurseHeader","getLeafHeaders","clientX","round","dispatchMove","clientXPos","dispatchEnd","handlersAndEvents","mouse","moveEvent","moveHandler","upEvent","upHandler","removeEventListener","touch","cancelable","preventDefault","stopPropagation","events","passiveIfSupported","supported","options","window","addEventListener","err","passiveEventSupported","passive","columnWidth","onMouseDown","onTouchStart","draggable","columnWidths","startX","isResizingColumn","percentageDeltaX","newColumnWidths","headerId","headerWidth","disableResizing","isResizing","autoResetResize","getAutoResetResize","resetResizing","cellStyles","top","useAbsoluteLayout","getRowStyles","totalColumnsWidth","display","boxSizing","useBlockLayout","useFlexLayout","flex","totalColumnsMinWidth","defaultFn","defaultWait","debounceRef","getDefaultFn","getDefaultWait","promise","Promise","resolve","reject","timeout","clearTimeout","setTimeout","instanceRef","userColumns","getStateReducer","s","handler","useReducer","reducerState","allColumnsQueue","initialRows","all","visibleColumnsDep","totalColumnsMaxWidth","render","footerGroups"],"mappings":"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"}